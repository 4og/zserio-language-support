// Generated from ZserioParser.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import ZserioParserListener from './ZserioParserListener.js';
import ZserioParserVisitor from './ZserioParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003r\u0303\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0003\u0002\u0005\u0002\u0092\n\u0002\u0003\u0002\u0005",
    "\u0002\u0095\n\u0002\u0003\u0002\u0007\u0002\u0098\n\u0002\f\u0002\u000e",
    "\u0002\u009b\u000b\u0002\u0003\u0002\u0007\u0002\u009e\n\u0002\f\u0002",
    "\u000e\u0002\u00a1\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u00af\n\u0004\f\u0004\u000e",
    "\u0004\u00b2\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00bc\n",
    "\u0005\f\u0005\u000e\u0005\u00bf\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00c3\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u00c9\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0005\u0007\u00d6\n\u0007\u0003\b\u0003\b\u0005",
    "\b\u00da\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u00e7\n\n\f\n\u000e\n\u00ea",
    "\u000b\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r",
    "\u0003\r\u0005\r\u00fb\n\r\u0003\r\u0005\r\u00fe\n\r\u0003\r\u0003\r",
    "\u0007\r\u0102\n\r\f\r\u000e\r\u0105\u000b\r\u0003\r\u0007\r\u0108\n",
    "\r\f\r\u000e\r\u010b\u000b\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0005",
    "\u000e\u0111\n\u000e\u0003\u000e\u0005\u000e\u0114\n\u000e\u0003\u000e",
    "\u0005\u000e\u0117\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u011b",
    "\n\u000e\u0003\u000e\u0005\u000e\u011e\n\u000e\u0003\u000e\u0005\u000e",
    "\u0121\n\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0011\u0005\u0011\u012f\n\u0011\u0003\u0011\u0005\u0011",
    "\u0132\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0137",
    "\n\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u013b\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u014b\n\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0152\n\u0016\f\u0016\u000e",
    "\u0016\u0155\u000b\u0016\u0003\u0016\u0005\u0016\u0158\n\u0016\u0003",
    "\u0016\u0007\u0016\u015b\n\u0016\f\u0016\u000e\u0016\u015e\u000b\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0006\u0017\u0164\n",
    "\u0017\r\u0017\u000e\u0017\u0165\u0003\u0017\u0005\u0017\u0169\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0174\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u017a\n\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u017f\n\u001b\u0003",
    "\u001b\u0005\u001b\u0182\n\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u0186\n\u001b\f\u001b\u000e\u001b\u0189\u000b\u001b\u0003\u001b\u0007",
    "\u001b\u018c\n\u001b\f\u001b\u000e\u001b\u018f\u000b\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0007\u001d\u019e\n\u001d\f\u001d\u000e\u001d\u01a1\u000b\u001d\u0003",
    "\u001d\u0005\u001d\u01a4\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01ac\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0007\u001f\u01b5\n\u001f\f\u001f\u000e\u001f\u01b8\u000b\u001f",
    "\u0003\u001f\u0005\u001f\u01bb\n\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0005 \u01c3\n \u0003!\u0003!\u0003!\u0005",
    "!\u01c8\n!\u0003!\u0003!\u0005!\u01cc\n!\u0003!\u0003!\u0007!\u01d0",
    "\n!\f!\u000e!\u01d3\u000b!\u0003!\u0005!\u01d6\n!\u0003!\u0005!\u01d9",
    "\n!\u0003!\u0003!\u0003!\u0003\"\u0005\"\u01df\n\"\u0003\"\u0003\"\u0003",
    "\"\u0005\"\u01e4\n\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003$\u0003",
    "$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0006&\u01f5",
    "\n&\r&\u000e&\u01f6\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003(\u0007(\u0204\n(\f(\u000e(\u0207\u000b",
    "(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0007*\u0217\n*\f*\u000e*\u021a\u000b",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0005",
    ",\u0225\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u00071\u0241\n1\f",
    "1\u000e1\u0244\u000b1\u00031\u00031\u00032\u00032\u00032\u00033\u0003",
    "3\u00033\u00033\u00073\u024f\n3\f3\u000e3\u0252\u000b3\u00033\u0003",
    "3\u00034\u00034\u00034\u00034\u00074\u025a\n4\f4\u000e4\u025d\u000b",
    "4\u00034\u00034\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00057\u0281\n7\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u028d\n7\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u02b6\n7\f",
    "7\u000e7\u02b9\u000b7\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003",
    ":\u0005:\u02c2\n:\u0005:\u02c4\n:\u0003;\u0003;\u0003;\u0005;\u02c9",
    "\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u02d3",
    "\n<\u0003=\u0003=\u0003=\u0007=\u02d8\n=\f=\u000e=\u02db\u000b=\u0003",
    ">\u0003>\u0003>\u0003>\u0007>\u02e1\n>\f>\u000e>\u02e4\u000b>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0005?\u02eb\n?\u0003@\u0003@\u0003@\u0003",
    "@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003D\u0003",
    "D\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003H\u0003H\u0003H\u0002",
    "\u0003lI\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0002\r\u0004\u0002",
    "BBNN\u0006\u0002\u0005\u0005\u0015\u0015\u001a\u001a  \u0004\u0002\b",
    "\b\u0016\u0017\u0004\u0002\u0015\u0015\u001a\u001a\u0005\u0002\u000b",
    "\f\u000f\u000f\u0014\u0014\u0004\u0002\n\n\u0018\u0018\u0003\u0002g",
    "n\u0004\u00027:QT\u0003\u0002X`\u0004\u0002##66\u0003\u0002-/\u0002",
    "\u0321\u0002\u0091\u0003\u0002\u0002\u0002\u0004\u00a4\u0003\u0002\u0002",
    "\u0002\u0006\u00aa\u0003\u0002\u0002\u0002\b\u00b5\u0003\u0002\u0002",
    "\u0002\n\u00c8\u0003\u0002\u0002\u0002\f\u00d5\u0003\u0002\u0002\u0002",
    "\u000e\u00d9\u0003\u0002\u0002\u0002\u0010\u00db\u0003\u0002\u0002\u0002",
    "\u0012\u00e2\u0003\u0002\u0002\u0002\u0014\u00ee\u0003\u0002\u0002\u0002",
    "\u0016\u00f2\u0003\u0002\u0002\u0002\u0018\u00f7\u0003\u0002\u0002\u0002",
    "\u001a\u0110\u0003\u0002\u0002\u0002\u001c\u0124\u0003\u0002\u0002\u0002",
    "\u001e\u012a\u0003\u0002\u0002\u0002 \u012e\u0003\u0002\u0002\u0002",
    "\"\u0138\u0003\u0002\u0002\u0002$\u013e\u0003\u0002\u0002\u0002&\u0141",
    "\u0003\u0002\u0002\u0002(\u0144\u0003\u0002\u0002\u0002*\u0147\u0003",
    "\u0002\u0002\u0002,\u0163\u0003\u0002\u0002\u0002.\u016c\u0003\u0002",
    "\u0002\u00020\u0170\u0003\u0002\u0002\u00022\u0177\u0003\u0002\u0002",
    "\u00024\u017b\u0003\u0002\u0002\u00026\u0193\u0003\u0002\u0002\u0002",
    "8\u0196\u0003\u0002\u0002\u0002:\u01a8\u0003\u0002\u0002\u0002<\u01ad",
    "\u0003\u0002\u0002\u0002>\u01bf\u0003\u0002\u0002\u0002@\u01c4\u0003",
    "\u0002\u0002\u0002B\u01de\u0003\u0002\u0002\u0002D\u01e7\u0003\u0002",
    "\u0002\u0002F\u01ea\u0003\u0002\u0002\u0002H\u01ed\u0003\u0002\u0002",
    "\u0002J\u01f0\u0003\u0002\u0002\u0002L\u01fb\u0003\u0002\u0002\u0002",
    "N\u01ff\u0003\u0002\u0002\u0002P\u020b\u0003\u0002\u0002\u0002R\u0212",
    "\u0003\u0002\u0002\u0002T\u021e\u0003\u0002\u0002\u0002V\u0224\u0003",
    "\u0002\u0002\u0002X\u022b\u0003\u0002\u0002\u0002Z\u0232\u0003\u0002",
    "\u0002\u0002\\\u0234\u0003\u0002\u0002\u0002^\u0236\u0003\u0002\u0002",
    "\u0002`\u023c\u0003\u0002\u0002\u0002b\u0247\u0003\u0002\u0002\u0002",
    "d\u024a\u0003\u0002\u0002\u0002f\u0255\u0003\u0002\u0002\u0002h\u0260",
    "\u0003\u0002\u0002\u0002j\u0262\u0003\u0002\u0002\u0002l\u0280\u0003",
    "\u0002\u0002\u0002n\u02ba\u0003\u0002\u0002\u0002p\u02bc\u0003\u0002",
    "\u0002\u0002r\u02c3\u0003\u0002\u0002\u0002t\u02c5\u0003\u0002\u0002",
    "\u0002v\u02d2\u0003\u0002\u0002\u0002x\u02d4\u0003\u0002\u0002\u0002",
    "z\u02dc\u0003\u0002\u0002\u0002|\u02ea\u0003\u0002\u0002\u0002~\u02ec",
    "\u0003\u0002\u0002\u0002\u0080\u02f0\u0003\u0002\u0002\u0002\u0082\u02f2",
    "\u0003\u0002\u0002\u0002\u0084\u02f4\u0003\u0002\u0002\u0002\u0086\u02f8",
    "\u0003\u0002\u0002\u0002\u0088\u02fa\u0003\u0002\u0002\u0002\u008a\u02fc",
    "\u0003\u0002\u0002\u0002\u008c\u02fe\u0003\u0002\u0002\u0002\u008e\u0300",
    "\u0003\u0002\u0002\u0002\u0090\u0092\u0005\u0004\u0003\u0002\u0091\u0090",
    "\u0003\u0002\u0002\u0002\u0091\u0092\u0003\u0002\u0002\u0002\u0092\u0094",
    "\u0003\u0002\u0002\u0002\u0093\u0095\u0005\u0006\u0004\u0002\u0094\u0093",
    "\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0099",
    "\u0003\u0002\u0002\u0002\u0096\u0098\u0005\b\u0005\u0002\u0097\u0096",
    "\u0003\u0002\u0002\u0002\u0098\u009b\u0003\u0002\u0002\u0002\u0099\u0097",
    "\u0003\u0002\u0002\u0002\u0099\u009a\u0003\u0002\u0002\u0002\u009a\u009f",
    "\u0003\u0002\u0002\u0002\u009b\u0099\u0003\u0002\u0002\u0002\u009c\u009e",
    "\u0005\n\u0006\u0002\u009d\u009c\u0003\u0002\u0002\u0002\u009e\u00a1",
    "\u0003\u0002\u0002\u0002\u009f\u009d\u0003\u0002\u0002\u0002\u009f\u00a0",
    "\u0003\u0002\u0002\u0002\u00a0\u00a2\u0003\u0002\u0002\u0002\u00a1\u009f",
    "\u0003\u0002\u0002\u0002\u00a2\u00a3\u0007\u0002\u0002\u0003\u00a3\u0003",
    "\u0003\u0002\u0002\u0002\u00a4\u00a5\u0007a\u0002\u0002\u00a5\u00a6",
    "\u0007\u0012\u0002\u0002\u00a6\u00a7\u0007h\u0002\u0002\u00a7\u00a8",
    "\u0007\u001e\u0002\u0002\u00a8\u00a9\u0007\u001f\u0002\u0002\u00a9\u0005",
    "\u0003\u0002\u0002\u0002\u00aa\u00ab\u0007?\u0002\u0002\u00ab\u00b0",
    "\u0005p9\u0002\u00ac\u00ad\u0007\t\u0002\u0002\u00ad\u00af\u0005p9\u0002",
    "\u00ae\u00ac\u0003\u0002\u0002\u0002\u00af\u00b2\u0003\u0002\u0002\u0002",
    "\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002",
    "\u00b1\u00b3\u0003\u0002\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002",
    "\u00b3\u00b4\u0007\u001f\u0002\u0002\u00b4\u0007\u0003\u0002\u0002\u0002",
    "\u00b5\u00b6\u00073\u0002\u0002\u00b6\u00b7\u0005p9\u0002\u00b7\u00bd",
    "\u0007\t\u0002\u0002\u00b8\u00b9\u0005p9\u0002\u00b9\u00ba\u0007\t\u0002",
    "\u0002\u00ba\u00bc\u0003\u0002\u0002\u0002\u00bb\u00b8\u0003\u0002\u0002",
    "\u0002\u00bc\u00bf\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003\u0002\u0002",
    "\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be\u00c2\u0003\u0002\u0002",
    "\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00c0\u00c3\u0005p9\u0002",
    "\u00c1\u00c3\u0007\u0017\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002",
    "\u00c2\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002",
    "\u00c4\u00c5\u0007\u001f\u0002\u0002\u00c5\t\u0003\u0002\u0002\u0002",
    "\u00c6\u00c9\u0005\u000e\b\u0002\u00c7\u00c9\u0005\f\u0007\u0002\u00c8",
    "\u00c6\u0003\u0002\u0002\u0002\u00c8\u00c7\u0003\u0002\u0002\u0002\u00c9",
    "\u000b\u0003\u0002\u0002\u0002\u00ca\u00d6\u0005\u0016\f\u0002\u00cb",
    "\u00d6\u0005\u0018\r\u0002\u00cc\u00d6\u0005*\u0016\u0002\u00cd\u00d6",
    "\u00054\u001b\u0002\u00ce\u00d6\u00058\u001d\u0002\u00cf\u00d6\u0005",
    "<\u001f\u0002\u00d0\u00d6\u0005@!\u0002\u00d1\u00d6\u0005J&\u0002\u00d2",
    "\u00d6\u0005N(\u0002\u00d3\u00d6\u0005R*\u0002\u00d4\u00d6\u0005j6\u0002",
    "\u00d5\u00ca\u0003\u0002\u0002\u0002\u00d5\u00cb\u0003\u0002\u0002\u0002",
    "\u00d5\u00cc\u0003\u0002\u0002\u0002\u00d5\u00cd\u0003\u0002\u0002\u0002",
    "\u00d5\u00ce\u0003\u0002\u0002\u0002\u00d5\u00cf\u0003\u0002\u0002\u0002",
    "\u00d5\u00d0\u0003\u0002\u0002\u0002\u00d5\u00d1\u0003\u0002\u0002\u0002",
    "\u00d5\u00d2\u0003\u0002\u0002\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002",
    "\u00d5\u00d4\u0003\u0002\u0002\u0002\u00d6\r\u0003\u0002\u0002\u0002",
    "\u00d7\u00da\u0005\u0010\t\u0002\u00d8\u00da\u0005\u0012\n\u0002\u00d9",
    "\u00d7\u0003\u0002\u0002\u0002\u00d9\u00d8\u0003\u0002\u0002\u0002\u00da",
    "\u000f\u0003\u0002\u0002\u0002\u00db\u00dc\u0007(\u0002\u0002\u00dc",
    "\u00dd\u0005t;\u0002\u00dd\u00de\u0005p9\u0002\u00de\u00df\u0007\u0004",
    "\u0002\u0002\u00df\u00e0\u0005l7\u0002\u00e0\u00e1\u0007\u001f\u0002",
    "\u0002\u00e1\u0011\u0003\u0002\u0002\u0002\u00e2\u00e3\u0007E\u0002",
    "\u0002\u00e3\u00e4\u0005p9\u0002\u00e4\u00e8\u0007\r\u0002\u0002\u00e5",
    "\u00e7\u0005\u0014\u000b\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e7",
    "\u00ea\u0003\u0002\u0002\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8",
    "\u00e9\u0003\u0002\u0002\u0002\u00e9\u00eb\u0003\u0002\u0002\u0002\u00ea",
    "\u00e8\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u001c\u0002\u0002\u00ec",
    "\u00ed\u0007\u001f\u0002\u0002\u00ed\u0013\u0003\u0002\u0002\u0002\u00ee",
    "\u00ef\u0007D\u0002\u0002\u00ef\u00f0\u0005l7\u0002\u00f0\u00f1\u0007",
    "\u001f\u0002\u0002\u00f1\u0015\u0003\u0002\u0002\u0002\u00f2\u00f3\u0007",
    "O\u0002\u0002\u00f3\u00f4\u0005r:\u0002\u00f4\u00f5\u0005p9\u0002\u00f5",
    "\u00f6\u0007\u001f\u0002\u0002\u00f6\u0017\u0003\u0002\u0002\u0002\u00f7",
    "\u00f8\u0007M\u0002\u0002\u00f8\u00fa\u0005p9\u0002\u00f9\u00fb\u0005",
    "d3\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002",
    "\u0002\u0002\u00fb\u00fd\u0003\u0002\u0002\u0002\u00fc\u00fe\u0005`",
    "1\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002",
    "\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0103\u0007\r",
    "\u0002\u0002\u0100\u0102\u0005\u001a\u000e\u0002\u0101\u0100\u0003\u0002",
    "\u0002\u0002\u0102\u0105\u0003\u0002\u0002\u0002\u0103\u0101\u0003\u0002",
    "\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0109\u0003\u0002",
    "\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0106\u0108\u0005X",
    "-\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0108\u010b\u0003\u0002",
    "\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002",
    "\u0002\u0002\u010a\u010c\u0003\u0002\u0002\u0002\u010b\u0109\u0003\u0002",
    "\u0002\u0002\u010c\u010d\u0007\u001c\u0002\u0002\u010d\u010e\u0007\u001f",
    "\u0002\u0002\u010e\u0019\u0003\u0002\u0002\u0002\u010f\u0111\u0005\u001c",
    "\u000f\u0002\u0110\u010f\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002",
    "\u0002\u0002\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u0114\u0005\u001e",
    "\u0010\u0002\u0113\u0112\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002",
    "\u0002\u0002\u0114\u0116\u0003\u0002\u0002\u0002\u0115\u0117\u0007>",
    "\u0002\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002",
    "\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u011a\u0005 ",
    "\u0011\u0002\u0119\u011b\u0005$\u0013\u0002\u011a\u0119\u0003\u0002",
    "\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u011d\u0003\u0002",
    "\u0002\u0002\u011c\u011e\u0005&\u0014\u0002\u011d\u011c\u0003\u0002",
    "\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u0120\u0003\u0002",
    "\u0002\u0002\u011f\u0121\u0005(\u0015\u0002\u0120\u011f\u0003\u0002",
    "\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002",
    "\u0002\u0002\u0122\u0123\u0007\u001f\u0002\u0002\u0123\u001b\u0003\u0002",
    "\u0002\u0002\u0124\u0125\u0007\"\u0002\u0002\u0125\u0126\u0007\u0012",
    "\u0002\u0002\u0126\u0127\u0005l7\u0002\u0127\u0128\u0007\u001e\u0002",
    "\u0002\u0128\u0129\u0007\u0006\u0002\u0002\u0129\u001d\u0003\u0002\u0002",
    "\u0002\u012a\u012b\u0005l7\u0002\u012b\u012c\u0007\u0006\u0002\u0002",
    "\u012c\u001f\u0003\u0002\u0002\u0002\u012d\u012f\u0007@\u0002\u0002",
    "\u012e\u012d\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002",
    "\u012f\u0131\u0003\u0002\u0002\u0002\u0130\u0132\u00072\u0002\u0002",
    "\u0131\u0130\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002",
    "\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0134\u0005t;\u0002\u0134",
    "\u0136\u0005p9\u0002\u0135\u0137\u0005\"\u0012\u0002\u0136\u0135\u0003",
    "\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137!\u0003",
    "\u0002\u0002\u0002\u0138\u013a\u0007\u000e\u0002\u0002\u0139\u013b\u0005",
    "l7\u0002\u013a\u0139\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002",
    "\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013d\u0007\u001d",
    "\u0002\u0002\u013d#\u0003\u0002\u0002\u0002\u013e\u013f\u0007\u0004",
    "\u0002\u0002\u013f\u0140\u0005l7\u0002\u0140%\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u00071\u0002\u0002\u0142\u0143\u0005l7\u0002\u0143\'\u0003",
    "\u0002\u0002\u0002\u0144\u0145\u0007\u0006\u0002\u0002\u0145\u0146\u0005",
    "l7\u0002\u0146)\u0003\u0002\u0002\u0002\u0147\u0148\u0007\'\u0002\u0002",
    "\u0148\u014a\u0005p9\u0002\u0149\u014b\u0005d3\u0002\u014a\u0149\u0003",
    "\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014c\u0003",
    "\u0002\u0002\u0002\u014c\u014d\u0005`1\u0002\u014d\u014e\u0007=\u0002",
    "\u0002\u014e\u014f\u0005l7\u0002\u014f\u0153\u0007\r\u0002\u0002\u0150",
    "\u0152\u0005,\u0017\u0002\u0151\u0150\u0003\u0002\u0002\u0002\u0152",
    "\u0155\u0003\u0002\u0002\u0002\u0153\u0151\u0003\u0002\u0002\u0002\u0153",
    "\u0154\u0003\u0002\u0002\u0002\u0154\u0157\u0003\u0002\u0002\u0002\u0155",
    "\u0153\u0003\u0002\u0002\u0002\u0156\u0158\u00050\u0019\u0002\u0157",
    "\u0156\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158",
    "\u015c\u0003\u0002\u0002\u0002\u0159\u015b\u0005X-\u0002\u015a\u0159",
    "\u0003\u0002\u0002\u0002\u015b\u015e\u0003\u0002\u0002\u0002\u015c\u015a",
    "\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015f",
    "\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0160",
    "\u0007\u001c\u0002\u0002\u0160\u0161\u0007\u001f\u0002\u0002\u0161+",
    "\u0003\u0002\u0002\u0002\u0162\u0164\u0005.\u0018\u0002\u0163\u0162",
    "\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u0163",
    "\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0168",
    "\u0003\u0002\u0002\u0002\u0167\u0169\u00052\u001a\u0002\u0168\u0167",
    "\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\u016a",
    "\u0003\u0002\u0002\u0002\u016a\u016b\u0007\u001f\u0002\u0002\u016b-",
    "\u0003\u0002\u0002\u0002\u016c\u016d\u0007&\u0002\u0002\u016d\u016e",
    "\u0005l7\u0002\u016e\u016f\u0007\u0006\u0002\u0002\u016f/\u0003\u0002",
    "\u0002\u0002\u0170\u0171\u0007)\u0002\u0002\u0171\u0173\u0007\u0006",
    "\u0002\u0002\u0172\u0174\u00052\u001a\u0002\u0173\u0172\u0003\u0002",
    "\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002",
    "\u0002\u0002\u0175\u0176\u0007\u001f\u0002\u0002\u01761\u0003\u0002",
    "\u0002\u0002\u0177\u0179\u0005 \u0011\u0002\u0178\u017a\u0005(\u0015",
    "\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002",
    "\u0002\u017a3\u0003\u0002\u0002\u0002\u017b\u017c\u0007U\u0002\u0002",
    "\u017c\u017e\u0005p9\u0002\u017d\u017f\u0005d3\u0002\u017e\u017d\u0003",
    "\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f\u0181\u0003",
    "\u0002\u0002\u0002\u0180\u0182\u0005`1\u0002\u0181\u0180\u0003\u0002",
    "\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002",
    "\u0002\u0002\u0183\u0187\u0007\r\u0002\u0002\u0184\u0186\u00056\u001c",
    "\u0002\u0185\u0184\u0003\u0002\u0002\u0002\u0186\u0189\u0003\u0002\u0002",
    "\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002",
    "\u0002\u0188\u018d\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002",
    "\u0002\u018a\u018c\u0005X-\u0002\u018b\u018a\u0003\u0002\u0002\u0002",
    "\u018c\u018f\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u0190\u0003\u0002\u0002\u0002",
    "\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0191\u0007\u001c\u0002\u0002",
    "\u0191\u0192\u0007\u001f\u0002\u0002\u01925\u0003\u0002\u0002\u0002",
    "\u0193\u0194\u00052\u001a\u0002\u0194\u0195\u0007\u001f\u0002\u0002",
    "\u01957\u0003\u0002\u0002\u0002\u0196\u0197\u0007*\u0002\u0002\u0197",
    "\u0198\u0005t;\u0002\u0198\u0199\u0005p9\u0002\u0199\u019a\u0007\r\u0002",
    "\u0002\u019a\u019f\u0005:\u001e\u0002\u019b\u019c\u0007\u0007\u0002",
    "\u0002\u019c\u019e\u0005:\u001e\u0002\u019d\u019b\u0003\u0002\u0002",
    "\u0002\u019e\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002",
    "\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003\u0002\u0002",
    "\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a2\u01a4\u0007\u0007\u0002",
    "\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002",
    "\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0007\u001c\u0002",
    "\u0002\u01a6\u01a7\u0007\u001f\u0002\u0002\u01a79\u0003\u0002\u0002",
    "\u0002\u01a8\u01ab\u0005p9\u0002\u01a9\u01aa\u0007\u0004\u0002\u0002",
    "\u01aa\u01ac\u0005l7\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\u0003\u0002\u0002\u0002\u01ac;\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0007%\u0002\u0002\u01ae\u01af\u0005t;\u0002\u01af\u01b0\u0005",
    "p9\u0002\u01b0\u01b1\u0007\r\u0002\u0002\u01b1\u01b6\u0005> \u0002\u01b2",
    "\u01b3\u0007\u0007\u0002\u0002\u01b3\u01b5\u0005> \u0002\u01b4\u01b2",
    "\u0003\u0002\u0002\u0002\u01b5\u01b8\u0003\u0002\u0002\u0002\u01b6\u01b4",
    "\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002\u01b7\u01ba",
    "\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b9\u01bb",
    "\u0007\u0007\u0002\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd",
    "\u0007\u001c\u0002\u0002\u01bd\u01be\u0007\u001f\u0002\u0002\u01be=",
    "\u0003\u0002\u0002\u0002\u01bf\u01c2\u0005p9\u0002\u01c0\u01c1\u0007",
    "\u0004\u0002\u0002\u01c1\u01c3\u0005l7\u0002\u01c2\u01c0\u0003\u0002",
    "\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3?\u0003\u0002",
    "\u0002\u0002\u01c4\u01c5\u0007I\u0002\u0002\u01c5\u01c7\u0005p9\u0002",
    "\u01c6\u01c8\u0005d3\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c7",
    "\u01c8\u0003\u0002\u0002\u0002\u01c8\u01cb\u0003\u0002\u0002\u0002\u01c9",
    "\u01ca\u0007V\u0002\u0002\u01ca\u01cc\u0005p9\u0002\u01cb\u01c9\u0003",
    "\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003",
    "\u0002\u0002\u0002\u01cd\u01d1\u0007\r\u0002\u0002\u01ce\u01d0\u0005",
    "B\"\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002",
    "\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002",
    "\u0002\u0002\u01d2\u01d5\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002",
    "\u0002\u0002\u01d4\u01d6\u0005D#\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d8\u0003\u0002\u0002",
    "\u0002\u01d7\u01d9\u0005H%\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002",
    "\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002",
    "\u01da\u01db\u0007\u001c\u0002\u0002\u01db\u01dc\u0007\u001f\u0002\u0002",
    "\u01dcA\u0003\u0002\u0002\u0002\u01dd\u01df\u0007J\u0002\u0002\u01de",
    "\u01dd\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df",
    "\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e1\u0005t;\u0002\u01e1\u01e3",
    "\u0005p9\u0002\u01e2\u01e4\u0005F$\u0002\u01e3\u01e2\u0003\u0002\u0002",
    "\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002",
    "\u0002\u01e5\u01e6\u0007\u001f\u0002\u0002\u01e6C\u0003\u0002\u0002",
    "\u0002\u01e7\u01e8\u0005F$\u0002\u01e8\u01e9\u0007\u001f\u0002\u0002",
    "\u01e9E\u0003\u0002\u0002\u0002\u01ea\u01eb\u0007G\u0002\u0002\u01eb",
    "\u01ec\u0005l7\u0002\u01ecG\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007",
    "K\u0002\u0002\u01ee\u01ef\u0007\u001f\u0002\u0002\u01efI\u0003\u0002",
    "\u0002\u0002\u01f0\u01f1\u0007H\u0002\u0002\u01f1\u01f2\u0005p9\u0002",
    "\u01f2\u01f4\u0007\r\u0002\u0002\u01f3\u01f5\u0005L\'\u0002\u01f4\u01f3",
    "\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f4",
    "\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8",
    "\u0003\u0002\u0002\u0002\u01f8\u01f9\u0007\u001c\u0002\u0002\u01f9\u01fa",
    "\u0007\u001f\u0002\u0002\u01faK\u0003\u0002\u0002\u0002\u01fb\u01fc",
    "\u0005t;\u0002\u01fc\u01fd\u0005p9\u0002\u01fd\u01fe\u0007\u001f\u0002",
    "\u0002\u01feM\u0003\u0002\u0002\u0002\u01ff\u0200\u0007F\u0002\u0002",
    "\u0200\u0201\u0005p9\u0002\u0201\u0205\u0007\r\u0002\u0002\u0202\u0204",
    "\u0005P)\u0002\u0203\u0202\u0003\u0002\u0002\u0002\u0204\u0207\u0003",
    "\u0002\u0002\u0002\u0205\u0203\u0003\u0002\u0002\u0002\u0205\u0206\u0003",
    "\u0002\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002\u0207\u0205\u0003",
    "\u0002\u0002\u0002\u0208\u0209\u0007\u001c\u0002\u0002\u0209\u020a\u0007",
    "\u001f\u0002\u0002\u020aO\u0003\u0002\u0002\u0002\u020b\u020c\u0005",
    "r:\u0002\u020c\u020d\u0005p9\u0002\u020d\u020e\u0007\u0012\u0002\u0002",
    "\u020e\u020f\u0005r:\u0002\u020f\u0210\u0007\u001e\u0002\u0002\u0210",
    "\u0211\u0007\u001f\u0002\u0002\u0211Q\u0003\u0002\u0002\u0002\u0212",
    "\u0213\u0007A\u0002\u0002\u0213\u0214\u0005p9\u0002\u0214\u0218\u0007",
    "\r\u0002\u0002\u0215\u0217\u0005T+\u0002\u0216\u0215\u0003\u0002\u0002",
    "\u0002\u0217\u021a\u0003\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002",
    "\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021b\u0003\u0002\u0002",
    "\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021b\u021c\u0007\u001c\u0002",
    "\u0002\u021c\u021d\u0007\u001f\u0002\u0002\u021dS\u0003\u0002\u0002",
    "\u0002\u021e\u021f\u0005V,\u0002\u021f\u0220\u0005r:\u0002\u0220\u0221",
    "\u0005p9\u0002\u0221\u0222\u0007\u001f\u0002\u0002\u0222U\u0003\u0002",
    "\u0002\u0002\u0223\u0225\t\u0002\u0002\u0002\u0224\u0223\u0003\u0002",
    "\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002",
    "\u0002\u0002\u0226\u0227\u0007P\u0002\u0002\u0227\u0228\u0007\u0012",
    "\u0002\u0002\u0228\u0229\u0005l7\u0002\u0229\u022a\u0007\u001e\u0002",
    "\u0002\u022aW\u0003\u0002\u0002\u0002\u022b\u022c\u00070\u0002\u0002",
    "\u022c\u022d\u0005Z.\u0002\u022d\u022e\u0005\\/\u0002\u022e\u022f\u0007",
    "\u0012\u0002\u0002\u022f\u0230\u0007\u001e\u0002\u0002\u0230\u0231\u0005",
    "^0\u0002\u0231Y\u0003\u0002\u0002\u0002\u0232\u0233\u0005r:\u0002\u0233",
    "[\u0003\u0002\u0002\u0002\u0234\u0235\u0005p9\u0002\u0235]\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0007\r\u0002\u0002\u0237\u0238\u0007C\u0002",
    "\u0002\u0238\u0239\u0005l7\u0002\u0239\u023a\u0007\u001f\u0002\u0002",
    "\u023a\u023b\u0007\u001c\u0002\u0002\u023b_\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0007\u0012\u0002\u0002\u023d\u0242\u0005b2\u0002\u023e",
    "\u023f\u0007\u0007\u0002\u0002\u023f\u0241\u0005b2\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0240",
    "\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0245",
    "\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002\u0245\u0246",
    "\u0007\u001e\u0002\u0002\u0246a\u0003\u0002\u0002\u0002\u0247\u0248",
    "\u0005r:\u0002\u0248\u0249\u0005p9\u0002\u0249c\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0007\u0014\u0002\u0002\u024b\u0250\u0005p9\u0002\u024c",
    "\u024d\u0007\u0007\u0002\u0002\u024d\u024f\u0005p9\u0002\u024e\u024c",
    "\u0003\u0002\u0002\u0002\u024f\u0252\u0003\u0002\u0002\u0002\u0250\u024e",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0253",
    "\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0253\u0254",
    "\u0007\f\u0002\u0002\u0254e\u0003\u0002\u0002\u0002\u0255\u0256\u0007",
    "\u0014\u0002\u0002\u0256\u025b\u0005h5\u0002\u0257\u0258\u0007\u0007",
    "\u0002\u0002\u0258\u025a\u0005h5\u0002\u0259\u0257\u0003\u0002\u0002",
    "\u0002\u025a\u025d\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002",
    "\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025e\u0003\u0002\u0002",
    "\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025e\u025f\u0007\f\u0002",
    "\u0002\u025fg\u0003\u0002\u0002\u0002\u0260\u0261\u0005r:\u0002\u0261",
    "i\u0003\u0002\u0002\u0002\u0262\u0263\u00075\u0002\u0002\u0263\u0264",
    "\u0005r:\u0002\u0264\u0265\u0005p9\u0002\u0265\u0266\u0007\u001f\u0002",
    "\u0002\u0266k\u0003\u0002\u0002\u0002\u0267\u0268\b7\u0001\u0002\u0268",
    "\u0269\u0007\u0012\u0002\u0002\u0269\u026a\u0005l7\u0002\u026a\u026b",
    "\u0007\u001e\u0002\u0002\u026b\u0281\u0003\u0002\u0002\u0002\u026c\u026d",
    "\u0007;\u0002\u0002\u026d\u026e\u0007\u0012\u0002\u0002\u026e\u026f",
    "\u0005l7\u0002\u026f\u0270\u0007\u001e\u0002\u0002\u0270\u0281\u0003",
    "\u0002\u0002\u0002\u0271\u0272\u0007W\u0002\u0002\u0272\u0273\u0007",
    "\u0012\u0002\u0002\u0273\u0274\u0005l7\u0002\u0274\u0275\u0007\u001e",
    "\u0002\u0002\u0275\u0281\u0003\u0002\u0002\u0002\u0276\u0277\u0007<",
    "\u0002\u0002\u0277\u0278\u0007\u0012\u0002\u0002\u0278\u0279\u0005l",
    "7\u0002\u0279\u027a\u0007\u001e\u0002\u0002\u027a\u0281\u0003\u0002",
    "\u0002\u0002\u027b\u027c\t\u0003\u0002\u0002\u027c\u0281\u0005l7\u0011",
    "\u027d\u0281\u0005n8\u0002\u027e\u0281\u00074\u0002\u0002\u027f\u0281",
    "\u0005p9\u0002\u0280\u0267\u0003\u0002\u0002\u0002\u0280\u026c\u0003",
    "\u0002\u0002\u0002\u0280\u0271\u0003\u0002\u0002\u0002\u0280\u0276\u0003",
    "\u0002\u0002\u0002\u0280\u027b\u0003\u0002\u0002\u0002\u0280\u027d\u0003",
    "\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280\u027f\u0003",
    "\u0002\u0002\u0002\u0281\u02b7\u0003\u0002\u0002\u0002\u0282\u0283\f",
    "\u0010\u0002\u0002\u0283\u0284\t\u0004\u0002\u0002\u0284\u02b6\u0005",
    "l7\u0011\u0285\u0286\f\u000f\u0002\u0002\u0286\u0287\t\u0005\u0002\u0002",
    "\u0287\u02b6\u0005l7\u0010\u0288\u028c\f\u000e\u0002\u0002\u0289\u028d",
    "\u0007\u0013\u0002\u0002\u028a\u028b\u0007\f\u0002\u0002\u028b\u028d",
    "\u0007\f\u0002\u0002\u028c\u0289\u0003\u0002\u0002\u0002\u028c\u028a",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u02b6",
    "\u0005l7\u000f\u028f\u0290\f\r\u0002\u0002\u0290\u0291\t\u0006\u0002",
    "\u0002\u0291\u02b6\u0005l7\u000e\u0292\u0293\f\f\u0002\u0002\u0293\u0294",
    "\t\u0007\u0002\u0002\u0294\u02b6\u0005l7\r\u0295\u0296\f\u000b\u0002",
    "\u0002\u0296\u0297\u0007\u0003\u0002\u0002\u0297\u02b6\u0005l7\f\u0298",
    "\u0299\f\n\u0002\u0002\u0299\u029a\u0007!\u0002\u0002\u029a\u02b6\u0005",
    "l7\u000b\u029b\u029c\f\t\u0002\u0002\u029c\u029d\u0007\u0019\u0002\u0002",
    "\u029d\u02b6\u0005l7\n\u029e\u029f\f\b\u0002\u0002\u029f\u02a0\u0007",
    "\u0010\u0002\u0002\u02a0\u02b6\u0005l7\t\u02a1\u02a2\f\u0007\u0002\u0002",
    "\u02a2\u02a3\u0007\u0011\u0002\u0002\u02a3\u02b6\u0005l7\b\u02a4\u02a5",
    "\f\u0006\u0002\u0002\u02a5\u02a6\u0007\u001b\u0002\u0002\u02a6\u02a7",
    "\u0005l7\u0002\u02a7\u02a8\u0007\u0006\u0002\u0002\u02a8\u02a9\u0005",
    "l7\u0006\u02a9\u02b6\u0003\u0002\u0002\u0002\u02aa\u02ab\f\u0017\u0002",
    "\u0002\u02ab\u02ac\u0007\u0012\u0002\u0002\u02ac\u02b6\u0007\u001e\u0002",
    "\u0002\u02ad\u02ae\f\u0016\u0002\u0002\u02ae\u02af\u0007\u000e\u0002",
    "\u0002\u02af\u02b0\u0005l7\u0002\u02b0\u02b1\u0007\u001d\u0002\u0002",
    "\u02b1\u02b6\u0003\u0002\u0002\u0002\u02b2\u02b3\f\u0015\u0002\u0002",
    "\u02b3\u02b4\u0007\t\u0002\u0002\u02b4\u02b6\u0005p9\u0002\u02b5\u0282",
    "\u0003\u0002\u0002\u0002\u02b5\u0285\u0003\u0002\u0002\u0002\u02b5\u0288",
    "\u0003\u0002\u0002\u0002\u02b5\u028f\u0003\u0002\u0002\u0002\u02b5\u0292",
    "\u0003\u0002\u0002\u0002\u02b5\u0295\u0003\u0002\u0002\u0002\u02b5\u0298",
    "\u0003\u0002\u0002\u0002\u02b5\u029b\u0003\u0002\u0002\u0002\u02b5\u029e",
    "\u0003\u0002\u0002\u0002\u02b5\u02a1\u0003\u0002\u0002\u0002\u02b5\u02a4",
    "\u0003\u0002\u0002\u0002\u02b5\u02aa\u0003\u0002\u0002\u0002\u02b5\u02ad",
    "\u0003\u0002\u0002\u0002\u02b5\u02b2\u0003\u0002\u0002\u0002\u02b6\u02b9",
    "\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b8",
    "\u0003\u0002\u0002\u0002\u02b8m\u0003\u0002\u0002\u0002\u02b9\u02b7",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\t\b\u0002\u0002\u02bbo\u0003\u0002",
    "\u0002\u0002\u02bc\u02bd\u0007o\u0002\u0002\u02bdq\u0003\u0002\u0002",
    "\u0002\u02be\u02c4\u0005v<\u0002\u02bf\u02c1\u0005x=\u0002\u02c0\u02c2",
    "\u0005f4\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003",
    "\u0002\u0002\u0002\u02c2\u02c4\u0003\u0002\u0002\u0002\u02c3\u02be\u0003",
    "\u0002\u0002\u0002\u02c3\u02bf\u0003\u0002\u0002\u0002\u02c4s\u0003",
    "\u0002\u0002\u0002\u02c5\u02c8\u0005r:\u0002\u02c6\u02c9\u0005z>\u0002",
    "\u02c7\u02c9\u0005~@\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8",
    "\u02c7\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9",
    "u\u0003\u0002\u0002\u0002\u02ca\u02d3\u0005\u0080A\u0002\u02cb\u02d3",
    "\u0005\u0082B\u0002\u02cc\u02d3\u0005\u0084C\u0002\u02cd\u02d3\u0005",
    "\u0086D\u0002\u02ce\u02d3\u0005\u0088E\u0002\u02cf\u02d3\u0005\u008a",
    "F\u0002\u02d0\u02d3\u0005\u008cG\u0002\u02d1\u02d3\u0005\u008eH\u0002",
    "\u02d2\u02ca\u0003\u0002\u0002\u0002\u02d2\u02cb\u0003\u0002\u0002\u0002",
    "\u02d2\u02cc\u0003\u0002\u0002\u0002\u02d2\u02cd\u0003\u0002\u0002\u0002",
    "\u02d2\u02ce\u0003\u0002\u0002\u0002\u02d2\u02cf\u0003\u0002\u0002\u0002",
    "\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d1\u0003\u0002\u0002\u0002",
    "\u02d3w\u0003\u0002\u0002\u0002\u02d4\u02d9\u0005p9\u0002\u02d5\u02d6",
    "\u0007\t\u0002\u0002\u02d6\u02d8\u0005p9\u0002\u02d7\u02d5\u0003\u0002",
    "\u0002\u0002\u02d8\u02db\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002",
    "\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02day\u0003\u0002",
    "\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007\u0012",
    "\u0002\u0002\u02dd\u02e2\u0005|?\u0002\u02de\u02df\u0007\u0007\u0002",
    "\u0002\u02df\u02e1\u0005|?\u0002\u02e0\u02de\u0003\u0002\u0002\u0002",
    "\u02e1\u02e4\u0003\u0002\u0002\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002",
    "\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e5\u0003\u0002\u0002\u0002",
    "\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e5\u02e6\u0007\u001e\u0002\u0002",
    "\u02e6{\u0003\u0002\u0002\u0002\u02e7\u02e8\u0007+\u0002\u0002\u02e8",
    "\u02eb\u0005p9\u0002\u02e9\u02eb\u0005l7\u0002\u02ea\u02e7\u0003\u0002",
    "\u0002\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb}\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\u0007\u0014\u0002\u0002\u02ed\u02ee\u0005l",
    "7\u0002\u02ee\u02ef\u0007\f\u0002\u0002\u02ef\u007f\u0003\u0002\u0002",
    "\u0002\u02f0\u02f1\t\t\u0002\u0002\u02f1\u0081\u0003\u0002\u0002\u0002",
    "\u02f2\u02f3\t\n\u0002\u0002\u02f3\u0083\u0003\u0002\u0002\u0002\u02f4",
    "\u02f5\t\u000b\u0002\u0002\u02f5\u02f6\u0007\u0006\u0002\u0002\u02f6",
    "\u02f7\u0007n\u0002\u0002\u02f7\u0085\u0003\u0002\u0002\u0002\u02f8",
    "\u02f9\t\u000b\u0002\u0002\u02f9\u0087\u0003\u0002\u0002\u0002\u02fa",
    "\u02fb\u0007$\u0002\u0002\u02fb\u0089\u0003\u0002\u0002\u0002\u02fc",
    "\u02fd\u0007L\u0002\u0002\u02fd\u008b\u0003\u0002\u0002\u0002\u02fe",
    "\u02ff\t\f\u0002\u0002\u02ff\u008d\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0007,\u0002\u0002\u0301\u008f\u0003\u0002\u0002\u0002F\u0091\u0094",
    "\u0099\u009f\u00b0\u00bd\u00c2\u00c8\u00d5\u00d9\u00e8\u00fa\u00fd\u0103",
    "\u0109\u0110\u0113\u0116\u011a\u011d\u0120\u012e\u0131\u0136\u013a\u014a",
    "\u0153\u0157\u015c\u0165\u0168\u0173\u0179\u017e\u0181\u0187\u018d\u019f",
    "\u01a3\u01ab\u01b6\u01ba\u01c2\u01c7\u01cb\u01d1\u01d5\u01d8\u01de\u01e3",
    "\u01f6\u0205\u0218\u0224\u0242\u0250\u025b\u0280\u028c\u02b5\u02b7\u02c1",
    "\u02c3\u02c8\u02d2\u02d9\u02e2\u02ea"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ZserioParser extends antlr4.Parser {

    static grammarFileName = "ZserioParser.g4";
    static literalNames = [ null, "'&'", "'='", "'!'", "':'", "','", "'/'", 
                            "'.'", "'=='", "'>='", "'>'", "'{'", "'['", 
                            "'<='", "'&&'", "'||'", "'('", "'<<'", "'<'", 
                            "'-'", "'%'", "'*'", "'!='", "'|'", "'+'", "'?'", 
                            "'}'", "']'", "')'", "';'", "'~'", "'^'", "'align'", 
                            "'bit'", "'bool'", "'bitmask'", "'case'", "'choice'", 
                            "'const'", "'default'", "'enum'", "'explicit'", 
                            "'extern'", "'float16'", "'float32'", "'float64'", 
                            "'function'", "'if'", "'implicit'", "'import'", 
                            "'@index'", "'instantiate'", "'int'", "'int16'", 
                            "'int32'", "'int64'", "'int8'", "'lengthof'", 
                            "'numbits'", "'on'", "'optional'", "'package'", 
                            "'packed'", "'pubsub'", "'publish'", "'return'", 
                            "'rule'", "'rule_group'", "'service'", "'sql'", 
                            "'sql_database'", "'sql_table'", "'sql_virtual'", 
                            "'sql_without_rowid'", "'string'", "'struct'", 
                            "'subscribe'", "'subtype'", "'topic'", "'uint16'", 
                            "'uint32'", "'uint64'", "'uint8'", "'union'", 
                            "'using'", "'valueof'", "'varint'", "'varint16'", 
                            "'varint32'", "'varint64'", "'varsize'", "'varuint'", 
                            "'varuint16'", "'varuint32'", "'varuint64'", 
                            "'zserio_compatibility_version'" ];
    static symbolicNames = [ null, "AND", "ASSIGN", "BANG", "COLON", "COMMA", 
                             "DIVIDE", "DOT", "EQ", "GE", "GT", "LBRACE", 
                             "LBRACKET", "LE", "LOGICAL_AND", "LOGICAL_OR", 
                             "LPAREN", "LSHIFT", "LT", "MINUS", "MODULO", 
                             "MULTIPLY", "NE", "OR", "PLUS", "QUESTIONMARK", 
                             "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                             "TILDE", "XOR", "ALIGN", "BIT_FIELD", "BOOL", 
                             "BITMASK", "CASE", "CHOICE", "CONST", "DEFAULT", 
                             "ENUM", "EXPLICIT", "EXTERN", "FLOAT16", "FLOAT32", 
                             "FLOAT64", "FUNCTION", "IF", "IMPLICIT", "IMPORT", 
                             "INDEX", "INSTANTIATE", "INT_FIELD", "INT16", 
                             "INT32", "INT64", "INT8", "LENGTHOF", "NUMBITS", 
                             "ON", "OPTIONAL", "PACKAGE", "PACKED", "PUBSUB", 
                             "PUBLISH", "RETURN", "RULE", "RULE_GROUP", 
                             "SERVICE", "SQL", "SQL_DATABASE", "SQL_TABLE", 
                             "SQL_VIRTUAL", "SQL_WITHOUT_ROWID", "STRING", 
                             "STRUCTURE", "SUBSCRIBE", "SUBTYPE", "TOPIC", 
                             "UINT16", "UINT32", "UINT64", "UINT8", "UNION", 
                             "USING", "VALUEOF", "VARINT", "VARINT16", "VARINT32", 
                             "VARINT64", "VARSIZE", "VARUINT", "VARUINT16", 
                             "VARUINT32", "VARUINT64", "COMPAT_VERSION", 
                             "WS", "DOC_COMMENT", "MARKDOWN_COMMENT", "BLOCK_COMMENT", 
                             "LINE_COMMENT", "BOOL_LITERAL", "STRING_LITERAL", 
                             "BINARY_LITERAL", "OCTAL_LITERAL", "HEXADECIMAL_LITERAL", 
                             "DOUBLE_LITERAL", "FLOAT_LITERAL", "DECIMAL_LITERAL", 
                             "ID", "INVALID_STRING_LITERAL", "INVALID_TOKEN", 
                             "RSHIFT" ];
    static ruleNames = [ "packageDeclaration", "compatibilityVersionDirective", 
                         "packageNameDefinition", "importDeclaration", "languageDirective", 
                         "typeDeclaration", "symbolDefinition", "constDefinition", 
                         "ruleGroupDefinition", "ruleDefinition", "subtypeDeclaration", 
                         "structureDeclaration", "structureFieldDefinition", 
                         "fieldAlignment", "fieldOffset", "fieldTypeId", 
                         "fieldArrayRange", "fieldInitializer", "fieldOptionalClause", 
                         "fieldConstraint", "choiceDeclaration", "choiceCases", 
                         "choiceCase", "choiceDefault", "choiceFieldDefinition", 
                         "unionDeclaration", "unionFieldDefinition", "enumDeclaration", 
                         "enumItem", "bitmaskDeclaration", "bitmaskValue", 
                         "sqlTableDeclaration", "sqlTableFieldDefinition", 
                         "sqlConstraintDefinition", "sqlConstraint", "sqlWithoutRowId", 
                         "sqlDatabaseDefinition", "sqlDatabaseFieldDefinition", 
                         "serviceDefinition", "serviceMethodDefinition", 
                         "pubsubDefinition", "pubsubMessageDefinition", 
                         "topicDefinition", "functionDefinition", "functionType", 
                         "functionName", "functionBody", "typeParameters", 
                         "parameterDefinition", "templateParameters", "templateArguments", 
                         "templateArgument", "instantiateDeclaration", "expression", 
                         "literal", "id", "typeReference", "typeInstantiation", 
                         "builtinType", "qualifiedName", "typeArguments", 
                         "typeArgument", "dynamicLengthArgument", "intType", 
                         "varintType", "fixedBitFieldType", "dynamicBitFieldType", 
                         "boolType", "stringType", "floatType", "externType" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ZserioParser.ruleNames;
        this.literalNames = ZserioParser.literalNames;
        this.symbolicNames = ZserioParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 53:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 14);
    		case 1:
    			return this.precpred(this._ctx, 13);
    		case 2:
    			return this.precpred(this._ctx, 12);
    		case 3:
    			return this.precpred(this._ctx, 11);
    		case 4:
    			return this.precpred(this._ctx, 10);
    		case 5:
    			return this.precpred(this._ctx, 9);
    		case 6:
    			return this.precpred(this._ctx, 8);
    		case 7:
    			return this.precpred(this._ctx, 7);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 4);
    		case 11:
    			return this.precpred(this._ctx, 21);
    		case 12:
    			return this.precpred(this._ctx, 20);
    		case 13:
    			return this.precpred(this._ctx, 19);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ZserioParser.RULE_packageDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.COMPAT_VERSION) {
	            this.state = 142;
	            this.compatibilityVersionDirective();
	        }

	        this.state = 146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.PACKAGE) {
	            this.state = 145;
	            this.packageNameDefinition();
	        }

	        this.state = 151;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.IMPORT) {
	            this.state = 148;
	            this.importDeclaration();
	            this.state = 153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ZserioParser.BITMASK - 35)) | (1 << (ZserioParser.CHOICE - 35)) | (1 << (ZserioParser.CONST - 35)) | (1 << (ZserioParser.ENUM - 35)) | (1 << (ZserioParser.INSTANTIATE - 35)) | (1 << (ZserioParser.PUBSUB - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ZserioParser.RULE_GROUP - 67)) | (1 << (ZserioParser.SERVICE - 67)) | (1 << (ZserioParser.SQL_DATABASE - 67)) | (1 << (ZserioParser.SQL_TABLE - 67)) | (1 << (ZserioParser.STRUCTURE - 67)) | (1 << (ZserioParser.SUBTYPE - 67)) | (1 << (ZserioParser.UNION - 67)))) !== 0)) {
	            this.state = 154;
	            this.languageDirective();
	            this.state = 159;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 160;
	        this.match(ZserioParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compatibilityVersionDirective() {
	    let localctx = new CompatibilityVersionDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ZserioParser.RULE_compatibilityVersionDirective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 162;
	        this.match(ZserioParser.COMPAT_VERSION);
	        this.state = 163;
	        this.match(ZserioParser.LPAREN);
	        this.state = 164;
	        this.match(ZserioParser.STRING_LITERAL);
	        this.state = 165;
	        this.match(ZserioParser.RPAREN);
	        this.state = 166;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageNameDefinition() {
	    let localctx = new PackageNameDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ZserioParser.RULE_packageNameDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this.match(ZserioParser.PACKAGE);
	        this.state = 169;
	        this.id();
	        this.state = 174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.DOT) {
	            this.state = 170;
	            this.match(ZserioParser.DOT);
	            this.state = 171;
	            this.id();
	            this.state = 176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 177;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ZserioParser.RULE_importDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this.match(ZserioParser.IMPORT);
	        this.state = 180;
	        this.id();
	        this.state = 181;
	        this.match(ZserioParser.DOT);
	        this.state = 187;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 182;
	                this.id();
	                this.state = 183;
	                this.match(ZserioParser.DOT); 
	            }
	            this.state = 189;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.ID:
	            this.state = 190;
	            this.id();
	            break;
	        case ZserioParser.MULTIPLY:
	            this.state = 191;
	            this.match(ZserioParser.MULTIPLY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 194;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	languageDirective() {
	    let localctx = new LanguageDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ZserioParser.RULE_languageDirective);
	    try {
	        this.state = 198;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.CONST:
	        case ZserioParser.RULE_GROUP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 196;
	            this.symbolDefinition();
	            break;
	        case ZserioParser.BITMASK:
	        case ZserioParser.CHOICE:
	        case ZserioParser.ENUM:
	        case ZserioParser.INSTANTIATE:
	        case ZserioParser.PUBSUB:
	        case ZserioParser.SERVICE:
	        case ZserioParser.SQL_DATABASE:
	        case ZserioParser.SQL_TABLE:
	        case ZserioParser.STRUCTURE:
	        case ZserioParser.SUBTYPE:
	        case ZserioParser.UNION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 197;
	            this.typeDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ZserioParser.RULE_typeDeclaration);
	    try {
	        this.state = 211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.SUBTYPE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 200;
	            this.subtypeDeclaration();
	            break;
	        case ZserioParser.STRUCTURE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 201;
	            this.structureDeclaration();
	            break;
	        case ZserioParser.CHOICE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 202;
	            this.choiceDeclaration();
	            break;
	        case ZserioParser.UNION:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 203;
	            this.unionDeclaration();
	            break;
	        case ZserioParser.ENUM:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 204;
	            this.enumDeclaration();
	            break;
	        case ZserioParser.BITMASK:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 205;
	            this.bitmaskDeclaration();
	            break;
	        case ZserioParser.SQL_TABLE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 206;
	            this.sqlTableDeclaration();
	            break;
	        case ZserioParser.SQL_DATABASE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 207;
	            this.sqlDatabaseDefinition();
	            break;
	        case ZserioParser.SERVICE:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 208;
	            this.serviceDefinition();
	            break;
	        case ZserioParser.PUBSUB:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 209;
	            this.pubsubDefinition();
	            break;
	        case ZserioParser.INSTANTIATE:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 210;
	            this.instantiateDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolDefinition() {
	    let localctx = new SymbolDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ZserioParser.RULE_symbolDefinition);
	    try {
	        this.state = 215;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.CONST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 213;
	            this.constDefinition();
	            break;
	        case ZserioParser.RULE_GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 214;
	            this.ruleGroupDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDefinition() {
	    let localctx = new ConstDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ZserioParser.RULE_constDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 217;
	        this.match(ZserioParser.CONST);
	        this.state = 218;
	        this.typeInstantiation();
	        this.state = 219;
	        this.id();
	        this.state = 220;
	        this.match(ZserioParser.ASSIGN);
	        this.state = 221;
	        this.expression(0);
	        this.state = 222;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleGroupDefinition() {
	    let localctx = new RuleGroupDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ZserioParser.RULE_ruleGroupDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(ZserioParser.RULE_GROUP);
	        this.state = 225;
	        this.id();
	        this.state = 226;
	        this.match(ZserioParser.LBRACE);
	        this.state = 230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.RULE) {
	            this.state = 227;
	            this.ruleDefinition();
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 233;
	        this.match(ZserioParser.RBRACE);
	        this.state = 234;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleDefinition() {
	    let localctx = new RuleDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ZserioParser.RULE_ruleDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 236;
	        this.match(ZserioParser.RULE);
	        this.state = 237;
	        this.expression(0);
	        this.state = 238;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeDeclaration() {
	    let localctx = new SubtypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ZserioParser.RULE_subtypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        this.match(ZserioParser.SUBTYPE);
	        this.state = 241;
	        this.typeReference();
	        this.state = 242;
	        this.id();
	        this.state = 243;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structureDeclaration() {
	    let localctx = new StructureDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ZserioParser.RULE_structureDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.match(ZserioParser.STRUCTURE);
	        this.state = 246;
	        this.id();
	        this.state = 248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LT) {
	            this.state = 247;
	            this.templateParameters();
	        }

	        this.state = 251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LPAREN) {
	            this.state = 250;
	            this.typeParameters();
	        }

	        this.state = 253;
	        this.match(ZserioParser.LBRACE);
	        this.state = 257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZserioParser.BANG) | (1 << ZserioParser.LPAREN) | (1 << ZserioParser.MINUS) | (1 << ZserioParser.PLUS) | (1 << ZserioParser.TILDE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ZserioParser.ALIGN - 32)) | (1 << (ZserioParser.BIT_FIELD - 32)) | (1 << (ZserioParser.BOOL - 32)) | (1 << (ZserioParser.EXTERN - 32)) | (1 << (ZserioParser.FLOAT16 - 32)) | (1 << (ZserioParser.FLOAT32 - 32)) | (1 << (ZserioParser.FLOAT64 - 32)) | (1 << (ZserioParser.IMPLICIT - 32)) | (1 << (ZserioParser.INDEX - 32)) | (1 << (ZserioParser.INT_FIELD - 32)) | (1 << (ZserioParser.INT16 - 32)) | (1 << (ZserioParser.INT32 - 32)) | (1 << (ZserioParser.INT64 - 32)) | (1 << (ZserioParser.INT8 - 32)) | (1 << (ZserioParser.LENGTHOF - 32)) | (1 << (ZserioParser.NUMBITS - 32)) | (1 << (ZserioParser.OPTIONAL - 32)) | (1 << (ZserioParser.PACKED - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VALUEOF - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)) | (1 << (ZserioParser.BOOL_LITERAL - 74)) | (1 << (ZserioParser.STRING_LITERAL - 74)) | (1 << (ZserioParser.BINARY_LITERAL - 74)) | (1 << (ZserioParser.OCTAL_LITERAL - 74)) | (1 << (ZserioParser.HEXADECIMAL_LITERAL - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ZserioParser.DOUBLE_LITERAL - 106)) | (1 << (ZserioParser.FLOAT_LITERAL - 106)) | (1 << (ZserioParser.DECIMAL_LITERAL - 106)) | (1 << (ZserioParser.ID - 106)))) !== 0)) {
	            this.state = 254;
	            this.structureFieldDefinition();
	            this.state = 259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.FUNCTION) {
	            this.state = 260;
	            this.functionDefinition();
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 266;
	        this.match(ZserioParser.RBRACE);
	        this.state = 267;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structureFieldDefinition() {
	    let localctx = new StructureFieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ZserioParser.RULE_structureFieldDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.ALIGN) {
	            this.state = 269;
	            this.fieldAlignment();
	        }

	        this.state = 273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 272;
	            this.fieldOffset();

	        }
	        this.state = 276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.OPTIONAL) {
	            this.state = 275;
	            this.match(ZserioParser.OPTIONAL);
	        }

	        this.state = 278;
	        this.fieldTypeId();
	        this.state = 280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.ASSIGN) {
	            this.state = 279;
	            this.fieldInitializer();
	        }

	        this.state = 283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.IF) {
	            this.state = 282;
	            this.fieldOptionalClause();
	        }

	        this.state = 286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.COLON) {
	            this.state = 285;
	            this.fieldConstraint();
	        }

	        this.state = 288;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAlignment() {
	    let localctx = new FieldAlignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ZserioParser.RULE_fieldAlignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 290;
	        this.match(ZserioParser.ALIGN);
	        this.state = 291;
	        this.match(ZserioParser.LPAREN);
	        this.state = 292;
	        this.expression(0);
	        this.state = 293;
	        this.match(ZserioParser.RPAREN);
	        this.state = 294;
	        this.match(ZserioParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldOffset() {
	    let localctx = new FieldOffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ZserioParser.RULE_fieldOffset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        this.expression(0);
	        this.state = 297;
	        this.match(ZserioParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeId() {
	    let localctx = new FieldTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ZserioParser.RULE_fieldTypeId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.PACKED) {
	            this.state = 299;
	            this.match(ZserioParser.PACKED);
	        }

	        this.state = 303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.IMPLICIT) {
	            this.state = 302;
	            this.match(ZserioParser.IMPLICIT);
	        }

	        this.state = 305;
	        this.typeInstantiation();
	        this.state = 306;
	        this.id();
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LBRACKET) {
	            this.state = 307;
	            this.fieldArrayRange();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldArrayRange() {
	    let localctx = new FieldArrayRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ZserioParser.RULE_fieldArrayRange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 310;
	        this.match(ZserioParser.LBRACKET);
	        this.state = 312;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZserioParser.BANG) | (1 << ZserioParser.LPAREN) | (1 << ZserioParser.MINUS) | (1 << ZserioParser.PLUS) | (1 << ZserioParser.TILDE))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (ZserioParser.INDEX - 50)) | (1 << (ZserioParser.LENGTHOF - 50)) | (1 << (ZserioParser.NUMBITS - 50)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (ZserioParser.VALUEOF - 85)) | (1 << (ZserioParser.BOOL_LITERAL - 85)) | (1 << (ZserioParser.STRING_LITERAL - 85)) | (1 << (ZserioParser.BINARY_LITERAL - 85)) | (1 << (ZserioParser.OCTAL_LITERAL - 85)) | (1 << (ZserioParser.HEXADECIMAL_LITERAL - 85)) | (1 << (ZserioParser.DOUBLE_LITERAL - 85)) | (1 << (ZserioParser.FLOAT_LITERAL - 85)) | (1 << (ZserioParser.DECIMAL_LITERAL - 85)) | (1 << (ZserioParser.ID - 85)))) !== 0)) {
	            this.state = 311;
	            this.expression(0);
	        }

	        this.state = 314;
	        this.match(ZserioParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldInitializer() {
	    let localctx = new FieldInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ZserioParser.RULE_fieldInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(ZserioParser.ASSIGN);
	        this.state = 317;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldOptionalClause() {
	    let localctx = new FieldOptionalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ZserioParser.RULE_fieldOptionalClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(ZserioParser.IF);
	        this.state = 320;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldConstraint() {
	    let localctx = new FieldConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ZserioParser.RULE_fieldConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.match(ZserioParser.COLON);
	        this.state = 323;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choiceDeclaration() {
	    let localctx = new ChoiceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ZserioParser.RULE_choiceDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this.match(ZserioParser.CHOICE);
	        this.state = 326;
	        this.id();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LT) {
	            this.state = 327;
	            this.templateParameters();
	        }

	        this.state = 330;
	        this.typeParameters();
	        this.state = 331;
	        this.match(ZserioParser.ON);
	        this.state = 332;
	        this.expression(0);
	        this.state = 333;
	        this.match(ZserioParser.LBRACE);
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.CASE) {
	            this.state = 334;
	            this.choiceCases();
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.DEFAULT) {
	            this.state = 340;
	            this.choiceDefault();
	        }

	        this.state = 346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.FUNCTION) {
	            this.state = 343;
	            this.functionDefinition();
	            this.state = 348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 349;
	        this.match(ZserioParser.RBRACE);
	        this.state = 350;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choiceCases() {
	    let localctx = new ChoiceCasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ZserioParser.RULE_choiceCases);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 353; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 352;
	            this.choiceCase();
	            this.state = 355; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ZserioParser.CASE);
	        this.state = 358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.IMPLICIT - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)) | (1 << (ZserioParser.PACKED - 33)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)))) !== 0) || _la===ZserioParser.ID) {
	            this.state = 357;
	            this.choiceFieldDefinition();
	        }

	        this.state = 360;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choiceCase() {
	    let localctx = new ChoiceCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ZserioParser.RULE_choiceCase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(ZserioParser.CASE);
	        this.state = 363;
	        this.expression(0);
	        this.state = 364;
	        this.match(ZserioParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choiceDefault() {
	    let localctx = new ChoiceDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ZserioParser.RULE_choiceDefault);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this.match(ZserioParser.DEFAULT);
	        this.state = 367;
	        this.match(ZserioParser.COLON);
	        this.state = 369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.IMPLICIT - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)) | (1 << (ZserioParser.PACKED - 33)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)))) !== 0) || _la===ZserioParser.ID) {
	            this.state = 368;
	            this.choiceFieldDefinition();
	        }

	        this.state = 371;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choiceFieldDefinition() {
	    let localctx = new ChoiceFieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ZserioParser.RULE_choiceFieldDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.fieldTypeId();
	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.COLON) {
	            this.state = 374;
	            this.fieldConstraint();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionDeclaration() {
	    let localctx = new UnionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ZserioParser.RULE_unionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 377;
	        this.match(ZserioParser.UNION);
	        this.state = 378;
	        this.id();
	        this.state = 380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LT) {
	            this.state = 379;
	            this.templateParameters();
	        }

	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LPAREN) {
	            this.state = 382;
	            this.typeParameters();
	        }

	        this.state = 385;
	        this.match(ZserioParser.LBRACE);
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.IMPLICIT - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)) | (1 << (ZserioParser.PACKED - 33)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)))) !== 0) || _la===ZserioParser.ID) {
	            this.state = 386;
	            this.unionFieldDefinition();
	            this.state = 391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.FUNCTION) {
	            this.state = 392;
	            this.functionDefinition();
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 398;
	        this.match(ZserioParser.RBRACE);
	        this.state = 399;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionFieldDefinition() {
	    let localctx = new UnionFieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ZserioParser.RULE_unionFieldDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.choiceFieldDefinition();
	        this.state = 402;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ZserioParser.RULE_enumDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(ZserioParser.ENUM);
	        this.state = 405;
	        this.typeInstantiation();
	        this.state = 406;
	        this.id();
	        this.state = 407;
	        this.match(ZserioParser.LBRACE);
	        this.state = 408;
	        this.enumItem();
	        this.state = 413;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 409;
	                this.match(ZserioParser.COMMA);
	                this.state = 410;
	                this.enumItem(); 
	            }
	            this.state = 415;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	        this.state = 417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.COMMA) {
	            this.state = 416;
	            this.match(ZserioParser.COMMA);
	        }

	        this.state = 419;
	        this.match(ZserioParser.RBRACE);
	        this.state = 420;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItem() {
	    let localctx = new EnumItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ZserioParser.RULE_enumItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.id();
	        this.state = 425;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.ASSIGN) {
	            this.state = 423;
	            this.match(ZserioParser.ASSIGN);
	            this.state = 424;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitmaskDeclaration() {
	    let localctx = new BitmaskDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ZserioParser.RULE_bitmaskDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.match(ZserioParser.BITMASK);
	        this.state = 428;
	        this.typeInstantiation();
	        this.state = 429;
	        this.id();
	        this.state = 430;
	        this.match(ZserioParser.LBRACE);
	        this.state = 431;
	        this.bitmaskValue();
	        this.state = 436;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 432;
	                this.match(ZserioParser.COMMA);
	                this.state = 433;
	                this.bitmaskValue(); 
	            }
	            this.state = 438;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.COMMA) {
	            this.state = 439;
	            this.match(ZserioParser.COMMA);
	        }

	        this.state = 442;
	        this.match(ZserioParser.RBRACE);
	        this.state = 443;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitmaskValue() {
	    let localctx = new BitmaskValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ZserioParser.RULE_bitmaskValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.id();
	        this.state = 448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.ASSIGN) {
	            this.state = 446;
	            this.match(ZserioParser.ASSIGN);
	            this.state = 447;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlTableDeclaration() {
	    let localctx = new SqlTableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ZserioParser.RULE_sqlTableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(ZserioParser.SQL_TABLE);
	        this.state = 451;
	        this.id();
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.LT) {
	            this.state = 452;
	            this.templateParameters();
	        }

	        this.state = 457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.USING) {
	            this.state = 455;
	            this.match(ZserioParser.USING);
	            this.state = 456;
	            this.id();
	        }

	        this.state = 459;
	        this.match(ZserioParser.LBRACE);
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (ZserioParser.SQL_VIRTUAL - 72)) | (1 << (ZserioParser.STRING - 72)) | (1 << (ZserioParser.UINT16 - 72)) | (1 << (ZserioParser.UINT32 - 72)) | (1 << (ZserioParser.UINT64 - 72)) | (1 << (ZserioParser.UINT8 - 72)) | (1 << (ZserioParser.VARINT - 72)) | (1 << (ZserioParser.VARINT16 - 72)) | (1 << (ZserioParser.VARINT32 - 72)) | (1 << (ZserioParser.VARINT64 - 72)) | (1 << (ZserioParser.VARSIZE - 72)) | (1 << (ZserioParser.VARUINT - 72)) | (1 << (ZserioParser.VARUINT16 - 72)) | (1 << (ZserioParser.VARUINT32 - 72)) | (1 << (ZserioParser.VARUINT64 - 72)))) !== 0) || _la===ZserioParser.ID) {
	            this.state = 460;
	            this.sqlTableFieldDefinition();
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.SQL) {
	            this.state = 466;
	            this.sqlConstraintDefinition();
	        }

	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.SQL_WITHOUT_ROWID) {
	            this.state = 469;
	            this.sqlWithoutRowId();
	        }

	        this.state = 472;
	        this.match(ZserioParser.RBRACE);
	        this.state = 473;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlTableFieldDefinition() {
	    let localctx = new SqlTableFieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ZserioParser.RULE_sqlTableFieldDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.SQL_VIRTUAL) {
	            this.state = 475;
	            this.match(ZserioParser.SQL_VIRTUAL);
	        }

	        this.state = 478;
	        this.typeInstantiation();
	        this.state = 479;
	        this.id();
	        this.state = 481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.SQL) {
	            this.state = 480;
	            this.sqlConstraint();
	        }

	        this.state = 483;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlConstraintDefinition() {
	    let localctx = new SqlConstraintDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ZserioParser.RULE_sqlConstraintDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.sqlConstraint();
	        this.state = 486;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlConstraint() {
	    let localctx = new SqlConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ZserioParser.RULE_sqlConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.match(ZserioParser.SQL);
	        this.state = 489;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlWithoutRowId() {
	    let localctx = new SqlWithoutRowIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ZserioParser.RULE_sqlWithoutRowId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(ZserioParser.SQL_WITHOUT_ROWID);
	        this.state = 492;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDatabaseDefinition() {
	    let localctx = new SqlDatabaseDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ZserioParser.RULE_sqlDatabaseDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(ZserioParser.SQL_DATABASE);
	        this.state = 495;
	        this.id();
	        this.state = 496;
	        this.match(ZserioParser.LBRACE);
	        this.state = 498; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 497;
	            this.sqlDatabaseFieldDefinition();
	            this.state = 500; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)))) !== 0) || _la===ZserioParser.ID);
	        this.state = 502;
	        this.match(ZserioParser.RBRACE);
	        this.state = 503;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDatabaseFieldDefinition() {
	    let localctx = new SqlDatabaseFieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ZserioParser.RULE_sqlDatabaseFieldDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 505;
	        this.typeInstantiation();
	        this.state = 506;
	        this.id();
	        this.state = 507;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceDefinition() {
	    let localctx = new ServiceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ZserioParser.RULE_serviceDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(ZserioParser.SERVICE);
	        this.state = 510;
	        this.id();
	        this.state = 511;
	        this.match(ZserioParser.LBRACE);
	        this.state = 515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ZserioParser.BIT_FIELD - 33)) | (1 << (ZserioParser.BOOL - 33)) | (1 << (ZserioParser.EXTERN - 33)) | (1 << (ZserioParser.FLOAT16 - 33)) | (1 << (ZserioParser.FLOAT32 - 33)) | (1 << (ZserioParser.FLOAT64 - 33)) | (1 << (ZserioParser.INT_FIELD - 33)) | (1 << (ZserioParser.INT16 - 33)) | (1 << (ZserioParser.INT32 - 33)) | (1 << (ZserioParser.INT64 - 33)) | (1 << (ZserioParser.INT8 - 33)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ZserioParser.STRING - 74)) | (1 << (ZserioParser.UINT16 - 74)) | (1 << (ZserioParser.UINT32 - 74)) | (1 << (ZserioParser.UINT64 - 74)) | (1 << (ZserioParser.UINT8 - 74)) | (1 << (ZserioParser.VARINT - 74)) | (1 << (ZserioParser.VARINT16 - 74)) | (1 << (ZserioParser.VARINT32 - 74)) | (1 << (ZserioParser.VARINT64 - 74)) | (1 << (ZserioParser.VARSIZE - 74)) | (1 << (ZserioParser.VARUINT - 74)) | (1 << (ZserioParser.VARUINT16 - 74)) | (1 << (ZserioParser.VARUINT32 - 74)) | (1 << (ZserioParser.VARUINT64 - 74)))) !== 0) || _la===ZserioParser.ID) {
	            this.state = 512;
	            this.serviceMethodDefinition();
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 518;
	        this.match(ZserioParser.RBRACE);
	        this.state = 519;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceMethodDefinition() {
	    let localctx = new ServiceMethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ZserioParser.RULE_serviceMethodDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.typeReference();
	        this.state = 522;
	        this.id();
	        this.state = 523;
	        this.match(ZserioParser.LPAREN);
	        this.state = 524;
	        this.typeReference();
	        this.state = 525;
	        this.match(ZserioParser.RPAREN);
	        this.state = 526;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pubsubDefinition() {
	    let localctx = new PubsubDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ZserioParser.RULE_pubsubDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(ZserioParser.PUBSUB);
	        this.state = 529;
	        this.id();
	        this.state = 530;
	        this.match(ZserioParser.LBRACE);
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ZserioParser.PUBLISH - 64)) | (1 << (ZserioParser.SUBSCRIBE - 64)) | (1 << (ZserioParser.TOPIC - 64)))) !== 0)) {
	            this.state = 531;
	            this.pubsubMessageDefinition();
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 537;
	        this.match(ZserioParser.RBRACE);
	        this.state = 538;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pubsubMessageDefinition() {
	    let localctx = new PubsubMessageDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ZserioParser.RULE_pubsubMessageDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.topicDefinition();
	        this.state = 541;
	        this.typeReference();
	        this.state = 542;
	        this.id();
	        this.state = 543;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topicDefinition() {
	    let localctx = new TopicDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ZserioParser.RULE_topicDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZserioParser.PUBLISH || _la===ZserioParser.SUBSCRIBE) {
	            this.state = 545;
	            _la = this._input.LA(1);
	            if(!(_la===ZserioParser.PUBLISH || _la===ZserioParser.SUBSCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 548;
	        this.match(ZserioParser.TOPIC);
	        this.state = 549;
	        this.match(ZserioParser.LPAREN);
	        this.state = 550;
	        this.expression(0);
	        this.state = 551;
	        this.match(ZserioParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ZserioParser.RULE_functionDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.match(ZserioParser.FUNCTION);
	        this.state = 554;
	        this.functionType();
	        this.state = 555;
	        this.functionName();
	        this.state = 556;
	        this.match(ZserioParser.LPAREN);
	        this.state = 557;
	        this.match(ZserioParser.RPAREN);
	        this.state = 558;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ZserioParser.RULE_functionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.typeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ZserioParser.RULE_functionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ZserioParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.match(ZserioParser.LBRACE);
	        this.state = 565;
	        this.match(ZserioParser.RETURN);
	        this.state = 566;
	        this.expression(0);
	        this.state = 567;
	        this.match(ZserioParser.SEMICOLON);
	        this.state = 568;
	        this.match(ZserioParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ZserioParser.RULE_typeParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(ZserioParser.LPAREN);
	        this.state = 571;
	        this.parameterDefinition();
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.COMMA) {
	            this.state = 572;
	            this.match(ZserioParser.COMMA);
	            this.state = 573;
	            this.parameterDefinition();
	            this.state = 578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 579;
	        this.match(ZserioParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDefinition() {
	    let localctx = new ParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ZserioParser.RULE_parameterDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this.typeReference();
	        this.state = 582;
	        this.id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateParameters() {
	    let localctx = new TemplateParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ZserioParser.RULE_templateParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(ZserioParser.LT);
	        this.state = 585;
	        this.id();
	        this.state = 590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.COMMA) {
	            this.state = 586;
	            this.match(ZserioParser.COMMA);
	            this.state = 587;
	            this.id();
	            this.state = 592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 593;
	        this.match(ZserioParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateArguments() {
	    let localctx = new TemplateArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ZserioParser.RULE_templateArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.match(ZserioParser.LT);
	        this.state = 596;
	        this.templateArgument();
	        this.state = 601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.COMMA) {
	            this.state = 597;
	            this.match(ZserioParser.COMMA);
	            this.state = 598;
	            this.templateArgument();
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 604;
	        this.match(ZserioParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateArgument() {
	    let localctx = new TemplateArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ZserioParser.RULE_templateArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.typeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instantiateDeclaration() {
	    let localctx = new InstantiateDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ZserioParser.RULE_instantiateDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(ZserioParser.INSTANTIATE);
	        this.state = 609;
	        this.typeReference();
	        this.state = 610;
	        this.id();
	        this.state = 611;
	        this.match(ZserioParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 106;
	    this.enterRecursionRule(localctx, 106, ZserioParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.LPAREN:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 614;
	            localctx.operator = this.match(ZserioParser.LPAREN);
	            this.state = 615;
	            this.expression(0);
	            this.state = 616;
	            this.match(ZserioParser.RPAREN);
	            break;
	        case ZserioParser.LENGTHOF:
	            localctx = new LengthofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 618;
	            localctx.operator = this.match(ZserioParser.LENGTHOF);
	            this.state = 619;
	            this.match(ZserioParser.LPAREN);
	            this.state = 620;
	            this.expression(0);
	            this.state = 621;
	            this.match(ZserioParser.RPAREN);
	            break;
	        case ZserioParser.VALUEOF:
	            localctx = new ValueofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 623;
	            localctx.operator = this.match(ZserioParser.VALUEOF);
	            this.state = 624;
	            this.match(ZserioParser.LPAREN);
	            this.state = 625;
	            this.expression(0);
	            this.state = 626;
	            this.match(ZserioParser.RPAREN);
	            break;
	        case ZserioParser.NUMBITS:
	            localctx = new NumbitsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 628;
	            localctx.operator = this.match(ZserioParser.NUMBITS);
	            this.state = 629;
	            this.match(ZserioParser.LPAREN);
	            this.state = 630;
	            this.expression(0);
	            this.state = 631;
	            this.match(ZserioParser.RPAREN);
	            break;
	        case ZserioParser.BANG:
	        case ZserioParser.MINUS:
	        case ZserioParser.PLUS:
	        case ZserioParser.TILDE:
	            localctx = new UnaryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 633;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZserioParser.BANG) | (1 << ZserioParser.MINUS) | (1 << ZserioParser.PLUS) | (1 << ZserioParser.TILDE))) !== 0))) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 634;
	            this.expression(15);
	            break;
	        case ZserioParser.BOOL_LITERAL:
	        case ZserioParser.STRING_LITERAL:
	        case ZserioParser.BINARY_LITERAL:
	        case ZserioParser.OCTAL_LITERAL:
	        case ZserioParser.HEXADECIMAL_LITERAL:
	        case ZserioParser.DOUBLE_LITERAL:
	        case ZserioParser.FLOAT_LITERAL:
	        case ZserioParser.DECIMAL_LITERAL:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 635;
	            this.literal();
	            break;
	        case ZserioParser.INDEX:
	            localctx = new IndexExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 636;
	            this.match(ZserioParser.INDEX);
	            break;
	        case ZserioParser.ID:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 637;
	            this.id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 693;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 691;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 640;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 641;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZserioParser.DIVIDE) | (1 << ZserioParser.MODULO) | (1 << ZserioParser.MULTIPLY))) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 642;
	                    this.expression(15);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 643;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 644;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===ZserioParser.MINUS || _la===ZserioParser.PLUS)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 645;
	                    this.expression(14);
	                    break;

	                case 3:
	                    localctx = new ShiftExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 646;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 650;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZserioParser.LSHIFT:
	                        this.state = 647;
	                        localctx.operator = this.match(ZserioParser.LSHIFT);
	                        break;
	                    case ZserioParser.GT:
	                        this.state = 648;
	                        localctx.operator = this.match(ZserioParser.GT);
	                        this.state = 649;
	                        this.match(ZserioParser.GT);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 652;
	                    this.expression(13);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 653;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 654;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZserioParser.GE) | (1 << ZserioParser.GT) | (1 << ZserioParser.LE) | (1 << ZserioParser.LT))) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 655;
	                    this.expression(12);
	                    break;

	                case 5:
	                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 656;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 657;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===ZserioParser.EQ || _la===ZserioParser.NE)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 658;
	                    this.expression(11);
	                    break;

	                case 6:
	                    localctx = new BitwiseAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 659;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 660;
	                    localctx.operator = this.match(ZserioParser.AND);
	                    this.state = 661;
	                    this.expression(10);
	                    break;

	                case 7:
	                    localctx = new BitwiseXorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 662;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 663;
	                    localctx.operator = this.match(ZserioParser.XOR);
	                    this.state = 664;
	                    this.expression(9);
	                    break;

	                case 8:
	                    localctx = new BitwiseOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 665;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 666;
	                    localctx.operator = this.match(ZserioParser.OR);
	                    this.state = 667;
	                    this.expression(8);
	                    break;

	                case 9:
	                    localctx = new LogicalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 668;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 669;
	                    localctx.operator = this.match(ZserioParser.LOGICAL_AND);
	                    this.state = 670;
	                    this.expression(7);
	                    break;

	                case 10:
	                    localctx = new LogicalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 671;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 672;
	                    localctx.operator = this.match(ZserioParser.LOGICAL_OR);
	                    this.state = 673;
	                    this.expression(6);
	                    break;

	                case 11:
	                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 674;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 675;
	                    localctx.operator = this.match(ZserioParser.QUESTIONMARK);
	                    this.state = 676;
	                    this.expression(0);
	                    this.state = 677;
	                    this.match(ZserioParser.COLON);
	                    this.state = 678;
	                    this.expression(4);
	                    break;

	                case 12:
	                    localctx = new FunctionCallExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 680;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 681;
	                    this.match(ZserioParser.LPAREN);
	                    this.state = 682;
	                    localctx.operator = this.match(ZserioParser.RPAREN);
	                    break;

	                case 13:
	                    localctx = new ArrayExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 683;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 684;
	                    localctx.operator = this.match(ZserioParser.LBRACKET);
	                    this.state = 685;
	                    this.expression(0);
	                    this.state = 686;
	                    this.match(ZserioParser.RBRACKET);
	                    break;

	                case 14:
	                    localctx = new DotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZserioParser.RULE_expression);
	                    this.state = 688;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 689;
	                    localctx.operator = this.match(ZserioParser.DOT);
	                    this.state = 690;
	                    this.id();
	                    break;

	                } 
	            }
	            this.state = 695;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ZserioParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        _la = this._input.LA(1);
	        if(!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ZserioParser.BOOL_LITERAL - 101)) | (1 << (ZserioParser.STRING_LITERAL - 101)) | (1 << (ZserioParser.BINARY_LITERAL - 101)) | (1 << (ZserioParser.OCTAL_LITERAL - 101)) | (1 << (ZserioParser.HEXADECIMAL_LITERAL - 101)) | (1 << (ZserioParser.DOUBLE_LITERAL - 101)) | (1 << (ZserioParser.FLOAT_LITERAL - 101)) | (1 << (ZserioParser.DECIMAL_LITERAL - 101)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id() {
	    let localctx = new IdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ZserioParser.RULE_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.match(ZserioParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeReference() {
	    let localctx = new TypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ZserioParser.RULE_typeReference);
	    try {
	        this.state = 705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.BIT_FIELD:
	        case ZserioParser.BOOL:
	        case ZserioParser.EXTERN:
	        case ZserioParser.FLOAT16:
	        case ZserioParser.FLOAT32:
	        case ZserioParser.FLOAT64:
	        case ZserioParser.INT_FIELD:
	        case ZserioParser.INT16:
	        case ZserioParser.INT32:
	        case ZserioParser.INT64:
	        case ZserioParser.INT8:
	        case ZserioParser.STRING:
	        case ZserioParser.UINT16:
	        case ZserioParser.UINT32:
	        case ZserioParser.UINT64:
	        case ZserioParser.UINT8:
	        case ZserioParser.VARINT:
	        case ZserioParser.VARINT16:
	        case ZserioParser.VARINT32:
	        case ZserioParser.VARINT64:
	        case ZserioParser.VARSIZE:
	        case ZserioParser.VARUINT:
	        case ZserioParser.VARUINT16:
	        case ZserioParser.VARUINT32:
	        case ZserioParser.VARUINT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 700;
	            this.builtinType();
	            break;
	        case ZserioParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 701;
	            this.qualifiedName();
	            this.state = 703;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 702;
	                this.templateArguments();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeInstantiation() {
	    let localctx = new TypeInstantiationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ZserioParser.RULE_typeInstantiation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.typeReference();
	        this.state = 710;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case ZserioParser.LPAREN:
	        	this.state = 708;
	        	this.typeArguments();
	        	break;
	        case ZserioParser.LT:
	        	this.state = 709;
	        	this.dynamicLengthArgument();
	        	break;
	        case ZserioParser.ID:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtinType() {
	    let localctx = new BuiltinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ZserioParser.RULE_builtinType);
	    try {
	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 712;
	            this.intType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 713;
	            this.varintType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 714;
	            this.fixedBitFieldType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 715;
	            this.dynamicBitFieldType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 716;
	            this.boolType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 717;
	            this.stringType();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 718;
	            this.floatType();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 719;
	            this.externType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ZserioParser.RULE_qualifiedName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.id();
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.DOT) {
	            this.state = 723;
	            this.match(ZserioParser.DOT);
	            this.state = 724;
	            this.id();
	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ZserioParser.RULE_typeArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.match(ZserioParser.LPAREN);
	        this.state = 731;
	        this.typeArgument();
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZserioParser.COMMA) {
	            this.state = 732;
	            this.match(ZserioParser.COMMA);
	            this.state = 733;
	            this.typeArgument();
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 739;
	        this.match(ZserioParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ZserioParser.RULE_typeArgument);
	    try {
	        this.state = 744;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZserioParser.EXPLICIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 741;
	            this.match(ZserioParser.EXPLICIT);
	            this.state = 742;
	            this.id();
	            break;
	        case ZserioParser.BANG:
	        case ZserioParser.LPAREN:
	        case ZserioParser.MINUS:
	        case ZserioParser.PLUS:
	        case ZserioParser.TILDE:
	        case ZserioParser.INDEX:
	        case ZserioParser.LENGTHOF:
	        case ZserioParser.NUMBITS:
	        case ZserioParser.VALUEOF:
	        case ZserioParser.BOOL_LITERAL:
	        case ZserioParser.STRING_LITERAL:
	        case ZserioParser.BINARY_LITERAL:
	        case ZserioParser.OCTAL_LITERAL:
	        case ZserioParser.HEXADECIMAL_LITERAL:
	        case ZserioParser.DOUBLE_LITERAL:
	        case ZserioParser.FLOAT_LITERAL:
	        case ZserioParser.DECIMAL_LITERAL:
	        case ZserioParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 743;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicLengthArgument() {
	    let localctx = new DynamicLengthArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ZserioParser.RULE_dynamicLengthArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this.match(ZserioParser.LT);
	        this.state = 747;
	        this.expression(0);
	        this.state = 748;
	        this.match(ZserioParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intType() {
	    let localctx = new IntTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ZserioParser.RULE_intType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (ZserioParser.INT16 - 53)) | (1 << (ZserioParser.INT32 - 53)) | (1 << (ZserioParser.INT64 - 53)) | (1 << (ZserioParser.INT8 - 53)) | (1 << (ZserioParser.UINT16 - 53)) | (1 << (ZserioParser.UINT32 - 53)) | (1 << (ZserioParser.UINT64 - 53)) | (1 << (ZserioParser.UINT8 - 53)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varintType() {
	    let localctx = new VarintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ZserioParser.RULE_varintType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        _la = this._input.LA(1);
	        if(!(((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (ZserioParser.VARINT - 86)) | (1 << (ZserioParser.VARINT16 - 86)) | (1 << (ZserioParser.VARINT32 - 86)) | (1 << (ZserioParser.VARINT64 - 86)) | (1 << (ZserioParser.VARSIZE - 86)) | (1 << (ZserioParser.VARUINT - 86)) | (1 << (ZserioParser.VARUINT16 - 86)) | (1 << (ZserioParser.VARUINT32 - 86)) | (1 << (ZserioParser.VARUINT64 - 86)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedBitFieldType() {
	    let localctx = new FixedBitFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ZserioParser.RULE_fixedBitFieldType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        _la = this._input.LA(1);
	        if(!(_la===ZserioParser.BIT_FIELD || _la===ZserioParser.INT_FIELD)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 755;
	        this.match(ZserioParser.COLON);
	        this.state = 756;
	        this.match(ZserioParser.DECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicBitFieldType() {
	    let localctx = new DynamicBitFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ZserioParser.RULE_dynamicBitFieldType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        _la = this._input.LA(1);
	        if(!(_la===ZserioParser.BIT_FIELD || _la===ZserioParser.INT_FIELD)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolType() {
	    let localctx = new BoolTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ZserioParser.RULE_boolType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        this.match(ZserioParser.BOOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringType() {
	    let localctx = new StringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ZserioParser.RULE_stringType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(ZserioParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatType() {
	    let localctx = new FloatTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ZserioParser.RULE_floatType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        _la = this._input.LA(1);
	        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ZserioParser.FLOAT16 - 43)) | (1 << (ZserioParser.FLOAT32 - 43)) | (1 << (ZserioParser.FLOAT64 - 43)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externType() {
	    let localctx = new ExternTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ZserioParser.RULE_externType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this.match(ZserioParser.EXTERN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ZserioParser.EOF = antlr4.Token.EOF;
ZserioParser.AND = 1;
ZserioParser.ASSIGN = 2;
ZserioParser.BANG = 3;
ZserioParser.COLON = 4;
ZserioParser.COMMA = 5;
ZserioParser.DIVIDE = 6;
ZserioParser.DOT = 7;
ZserioParser.EQ = 8;
ZserioParser.GE = 9;
ZserioParser.GT = 10;
ZserioParser.LBRACE = 11;
ZserioParser.LBRACKET = 12;
ZserioParser.LE = 13;
ZserioParser.LOGICAL_AND = 14;
ZserioParser.LOGICAL_OR = 15;
ZserioParser.LPAREN = 16;
ZserioParser.LSHIFT = 17;
ZserioParser.LT = 18;
ZserioParser.MINUS = 19;
ZserioParser.MODULO = 20;
ZserioParser.MULTIPLY = 21;
ZserioParser.NE = 22;
ZserioParser.OR = 23;
ZserioParser.PLUS = 24;
ZserioParser.QUESTIONMARK = 25;
ZserioParser.RBRACE = 26;
ZserioParser.RBRACKET = 27;
ZserioParser.RPAREN = 28;
ZserioParser.SEMICOLON = 29;
ZserioParser.TILDE = 30;
ZserioParser.XOR = 31;
ZserioParser.ALIGN = 32;
ZserioParser.BIT_FIELD = 33;
ZserioParser.BOOL = 34;
ZserioParser.BITMASK = 35;
ZserioParser.CASE = 36;
ZserioParser.CHOICE = 37;
ZserioParser.CONST = 38;
ZserioParser.DEFAULT = 39;
ZserioParser.ENUM = 40;
ZserioParser.EXPLICIT = 41;
ZserioParser.EXTERN = 42;
ZserioParser.FLOAT16 = 43;
ZserioParser.FLOAT32 = 44;
ZserioParser.FLOAT64 = 45;
ZserioParser.FUNCTION = 46;
ZserioParser.IF = 47;
ZserioParser.IMPLICIT = 48;
ZserioParser.IMPORT = 49;
ZserioParser.INDEX = 50;
ZserioParser.INSTANTIATE = 51;
ZserioParser.INT_FIELD = 52;
ZserioParser.INT16 = 53;
ZserioParser.INT32 = 54;
ZserioParser.INT64 = 55;
ZserioParser.INT8 = 56;
ZserioParser.LENGTHOF = 57;
ZserioParser.NUMBITS = 58;
ZserioParser.ON = 59;
ZserioParser.OPTIONAL = 60;
ZserioParser.PACKAGE = 61;
ZserioParser.PACKED = 62;
ZserioParser.PUBSUB = 63;
ZserioParser.PUBLISH = 64;
ZserioParser.RETURN = 65;
ZserioParser.RULE = 66;
ZserioParser.RULE_GROUP = 67;
ZserioParser.SERVICE = 68;
ZserioParser.SQL = 69;
ZserioParser.SQL_DATABASE = 70;
ZserioParser.SQL_TABLE = 71;
ZserioParser.SQL_VIRTUAL = 72;
ZserioParser.SQL_WITHOUT_ROWID = 73;
ZserioParser.STRING = 74;
ZserioParser.STRUCTURE = 75;
ZserioParser.SUBSCRIBE = 76;
ZserioParser.SUBTYPE = 77;
ZserioParser.TOPIC = 78;
ZserioParser.UINT16 = 79;
ZserioParser.UINT32 = 80;
ZserioParser.UINT64 = 81;
ZserioParser.UINT8 = 82;
ZserioParser.UNION = 83;
ZserioParser.USING = 84;
ZserioParser.VALUEOF = 85;
ZserioParser.VARINT = 86;
ZserioParser.VARINT16 = 87;
ZserioParser.VARINT32 = 88;
ZserioParser.VARINT64 = 89;
ZserioParser.VARSIZE = 90;
ZserioParser.VARUINT = 91;
ZserioParser.VARUINT16 = 92;
ZserioParser.VARUINT32 = 93;
ZserioParser.VARUINT64 = 94;
ZserioParser.COMPAT_VERSION = 95;
ZserioParser.WS = 96;
ZserioParser.DOC_COMMENT = 97;
ZserioParser.MARKDOWN_COMMENT = 98;
ZserioParser.BLOCK_COMMENT = 99;
ZserioParser.LINE_COMMENT = 100;
ZserioParser.BOOL_LITERAL = 101;
ZserioParser.STRING_LITERAL = 102;
ZserioParser.BINARY_LITERAL = 103;
ZserioParser.OCTAL_LITERAL = 104;
ZserioParser.HEXADECIMAL_LITERAL = 105;
ZserioParser.DOUBLE_LITERAL = 106;
ZserioParser.FLOAT_LITERAL = 107;
ZserioParser.DECIMAL_LITERAL = 108;
ZserioParser.ID = 109;
ZserioParser.INVALID_STRING_LITERAL = 110;
ZserioParser.INVALID_TOKEN = 111;
ZserioParser.RSHIFT = 112;

ZserioParser.RULE_packageDeclaration = 0;
ZserioParser.RULE_compatibilityVersionDirective = 1;
ZserioParser.RULE_packageNameDefinition = 2;
ZserioParser.RULE_importDeclaration = 3;
ZserioParser.RULE_languageDirective = 4;
ZserioParser.RULE_typeDeclaration = 5;
ZserioParser.RULE_symbolDefinition = 6;
ZserioParser.RULE_constDefinition = 7;
ZserioParser.RULE_ruleGroupDefinition = 8;
ZserioParser.RULE_ruleDefinition = 9;
ZserioParser.RULE_subtypeDeclaration = 10;
ZserioParser.RULE_structureDeclaration = 11;
ZserioParser.RULE_structureFieldDefinition = 12;
ZserioParser.RULE_fieldAlignment = 13;
ZserioParser.RULE_fieldOffset = 14;
ZserioParser.RULE_fieldTypeId = 15;
ZserioParser.RULE_fieldArrayRange = 16;
ZserioParser.RULE_fieldInitializer = 17;
ZserioParser.RULE_fieldOptionalClause = 18;
ZserioParser.RULE_fieldConstraint = 19;
ZserioParser.RULE_choiceDeclaration = 20;
ZserioParser.RULE_choiceCases = 21;
ZserioParser.RULE_choiceCase = 22;
ZserioParser.RULE_choiceDefault = 23;
ZserioParser.RULE_choiceFieldDefinition = 24;
ZserioParser.RULE_unionDeclaration = 25;
ZserioParser.RULE_unionFieldDefinition = 26;
ZserioParser.RULE_enumDeclaration = 27;
ZserioParser.RULE_enumItem = 28;
ZserioParser.RULE_bitmaskDeclaration = 29;
ZserioParser.RULE_bitmaskValue = 30;
ZserioParser.RULE_sqlTableDeclaration = 31;
ZserioParser.RULE_sqlTableFieldDefinition = 32;
ZserioParser.RULE_sqlConstraintDefinition = 33;
ZserioParser.RULE_sqlConstraint = 34;
ZserioParser.RULE_sqlWithoutRowId = 35;
ZserioParser.RULE_sqlDatabaseDefinition = 36;
ZserioParser.RULE_sqlDatabaseFieldDefinition = 37;
ZserioParser.RULE_serviceDefinition = 38;
ZserioParser.RULE_serviceMethodDefinition = 39;
ZserioParser.RULE_pubsubDefinition = 40;
ZserioParser.RULE_pubsubMessageDefinition = 41;
ZserioParser.RULE_topicDefinition = 42;
ZserioParser.RULE_functionDefinition = 43;
ZserioParser.RULE_functionType = 44;
ZserioParser.RULE_functionName = 45;
ZserioParser.RULE_functionBody = 46;
ZserioParser.RULE_typeParameters = 47;
ZserioParser.RULE_parameterDefinition = 48;
ZserioParser.RULE_templateParameters = 49;
ZserioParser.RULE_templateArguments = 50;
ZserioParser.RULE_templateArgument = 51;
ZserioParser.RULE_instantiateDeclaration = 52;
ZserioParser.RULE_expression = 53;
ZserioParser.RULE_literal = 54;
ZserioParser.RULE_id = 55;
ZserioParser.RULE_typeReference = 56;
ZserioParser.RULE_typeInstantiation = 57;
ZserioParser.RULE_builtinType = 58;
ZserioParser.RULE_qualifiedName = 59;
ZserioParser.RULE_typeArguments = 60;
ZserioParser.RULE_typeArgument = 61;
ZserioParser.RULE_dynamicLengthArgument = 62;
ZserioParser.RULE_intType = 63;
ZserioParser.RULE_varintType = 64;
ZserioParser.RULE_fixedBitFieldType = 65;
ZserioParser.RULE_dynamicBitFieldType = 66;
ZserioParser.RULE_boolType = 67;
ZserioParser.RULE_stringType = 68;
ZserioParser.RULE_floatType = 69;
ZserioParser.RULE_externType = 70;

class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_packageDeclaration;
    }

	EOF() {
	    return this.getToken(ZserioParser.EOF, 0);
	};

	compatibilityVersionDirective() {
	    return this.getTypedRuleContext(CompatibilityVersionDirectiveContext,0);
	};

	packageNameDefinition() {
	    return this.getTypedRuleContext(PackageNameDefinitionContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	languageDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LanguageDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(LanguageDirectiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompatibilityVersionDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_compatibilityVersionDirective;
    }

	COMPAT_VERSION() {
	    return this.getToken(ZserioParser.COMPAT_VERSION, 0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ZserioParser.STRING_LITERAL, 0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterCompatibilityVersionDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitCompatibilityVersionDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitCompatibilityVersionDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageNameDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_packageNameDefinition;
    }

	PACKAGE() {
	    return this.getToken(ZserioParser.PACKAGE, 0);
	};

	id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdContext);
	    } else {
	        return this.getTypedRuleContext(IdContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.DOT);
	    } else {
	        return this.getToken(ZserioParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterPackageNameDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitPackageNameDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitPackageNameDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_importDeclaration;
    }

	IMPORT() {
	    return this.getToken(ZserioParser.IMPORT, 0);
	};

	id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdContext);
	    } else {
	        return this.getTypedRuleContext(IdContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.DOT);
	    } else {
	        return this.getToken(ZserioParser.DOT, i);
	    }
	};


	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	MULTIPLY() {
	    return this.getToken(ZserioParser.MULTIPLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LanguageDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_languageDirective;
    }

	symbolDefinition() {
	    return this.getTypedRuleContext(SymbolDefinitionContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLanguageDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLanguageDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLanguageDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeDeclaration;
    }

	subtypeDeclaration() {
	    return this.getTypedRuleContext(SubtypeDeclarationContext,0);
	};

	structureDeclaration() {
	    return this.getTypedRuleContext(StructureDeclarationContext,0);
	};

	choiceDeclaration() {
	    return this.getTypedRuleContext(ChoiceDeclarationContext,0);
	};

	unionDeclaration() {
	    return this.getTypedRuleContext(UnionDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	bitmaskDeclaration() {
	    return this.getTypedRuleContext(BitmaskDeclarationContext,0);
	};

	sqlTableDeclaration() {
	    return this.getTypedRuleContext(SqlTableDeclarationContext,0);
	};

	sqlDatabaseDefinition() {
	    return this.getTypedRuleContext(SqlDatabaseDefinitionContext,0);
	};

	serviceDefinition() {
	    return this.getTypedRuleContext(ServiceDefinitionContext,0);
	};

	pubsubDefinition() {
	    return this.getTypedRuleContext(PubsubDefinitionContext,0);
	};

	instantiateDeclaration() {
	    return this.getTypedRuleContext(InstantiateDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SymbolDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_symbolDefinition;
    }

	constDefinition() {
	    return this.getTypedRuleContext(ConstDefinitionContext,0);
	};

	ruleGroupDefinition() {
	    return this.getTypedRuleContext(RuleGroupDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSymbolDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSymbolDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSymbolDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_constDefinition;
    }

	CONST() {
	    return this.getToken(ZserioParser.CONST, 0);
	};

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	ASSIGN() {
	    return this.getToken(ZserioParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterConstDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitConstDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitConstDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleGroupDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_ruleGroupDefinition;
    }

	RULE_GROUP() {
	    return this.getToken(ZserioParser.RULE_GROUP, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	ruleDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(RuleDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterRuleGroupDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitRuleGroupDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitRuleGroupDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_ruleDefinition;
    }

	RULE() {
	    return this.getToken(ZserioParser.RULE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterRuleDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitRuleDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitRuleDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubtypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_subtypeDeclaration;
    }

	SUBTYPE() {
	    return this.getToken(ZserioParser.SUBTYPE, 0);
	};

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSubtypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSubtypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSubtypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructureDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_structureDeclaration;
    }

	STRUCTURE() {
	    return this.getToken(ZserioParser.STRUCTURE, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	templateParameters() {
	    return this.getTypedRuleContext(TemplateParametersContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	structureFieldDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructureFieldDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(StructureFieldDefinitionContext,i);
	    }
	};

	functionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterStructureDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitStructureDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitStructureDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructureFieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_structureFieldDefinition;
    }

	fieldTypeId() {
	    return this.getTypedRuleContext(FieldTypeIdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	fieldAlignment() {
	    return this.getTypedRuleContext(FieldAlignmentContext,0);
	};

	fieldOffset() {
	    return this.getTypedRuleContext(FieldOffsetContext,0);
	};

	OPTIONAL() {
	    return this.getToken(ZserioParser.OPTIONAL, 0);
	};

	fieldInitializer() {
	    return this.getTypedRuleContext(FieldInitializerContext,0);
	};

	fieldOptionalClause() {
	    return this.getTypedRuleContext(FieldOptionalClauseContext,0);
	};

	fieldConstraint() {
	    return this.getTypedRuleContext(FieldConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterStructureFieldDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitStructureFieldDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitStructureFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldAlignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldAlignment;
    }

	ALIGN() {
	    return this.getToken(ZserioParser.ALIGN, 0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldAlignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldAlignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldAlignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldOffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldOffset;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldOffset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldOffset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldTypeId;
    }

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	PACKED() {
	    return this.getToken(ZserioParser.PACKED, 0);
	};

	IMPLICIT() {
	    return this.getToken(ZserioParser.IMPLICIT, 0);
	};

	fieldArrayRange() {
	    return this.getTypedRuleContext(FieldArrayRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldArrayRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldArrayRange;
    }

	LBRACKET() {
	    return this.getToken(ZserioParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(ZserioParser.RBRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldArrayRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldArrayRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldArrayRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldInitializer;
    }

	ASSIGN() {
	    return this.getToken(ZserioParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldOptionalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldOptionalClause;
    }

	IF() {
	    return this.getToken(ZserioParser.IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldOptionalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldOptionalClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldOptionalClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fieldConstraint;
    }

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFieldConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFieldConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFieldConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoiceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_choiceDeclaration;
    }

	CHOICE() {
	    return this.getToken(ZserioParser.CHOICE, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	ON() {
	    return this.getToken(ZserioParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	templateParameters() {
	    return this.getTypedRuleContext(TemplateParametersContext,0);
	};

	choiceCases = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoiceCasesContext);
	    } else {
	        return this.getTypedRuleContext(ChoiceCasesContext,i);
	    }
	};

	choiceDefault() {
	    return this.getTypedRuleContext(ChoiceDefaultContext,0);
	};

	functionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterChoiceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitChoiceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitChoiceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoiceCasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_choiceCases;
    }

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	choiceCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoiceCaseContext);
	    } else {
	        return this.getTypedRuleContext(ChoiceCaseContext,i);
	    }
	};

	choiceFieldDefinition() {
	    return this.getTypedRuleContext(ChoiceFieldDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterChoiceCases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitChoiceCases(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitChoiceCases(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoiceCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_choiceCase;
    }

	CASE() {
	    return this.getToken(ZserioParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterChoiceCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitChoiceCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitChoiceCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoiceDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_choiceDefault;
    }

	DEFAULT() {
	    return this.getToken(ZserioParser.DEFAULT, 0);
	};

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	choiceFieldDefinition() {
	    return this.getTypedRuleContext(ChoiceFieldDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterChoiceDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitChoiceDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitChoiceDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoiceFieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_choiceFieldDefinition;
    }

	fieldTypeId() {
	    return this.getTypedRuleContext(FieldTypeIdContext,0);
	};

	fieldConstraint() {
	    return this.getTypedRuleContext(FieldConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterChoiceFieldDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitChoiceFieldDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitChoiceFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_unionDeclaration;
    }

	UNION() {
	    return this.getToken(ZserioParser.UNION, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	templateParameters() {
	    return this.getTypedRuleContext(TemplateParametersContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	unionFieldDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionFieldDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(UnionFieldDefinitionContext,i);
	    }
	};

	functionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterUnionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitUnionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitUnionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionFieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_unionFieldDefinition;
    }

	choiceFieldDefinition() {
	    return this.getTypedRuleContext(ChoiceFieldDefinitionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterUnionFieldDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitUnionFieldDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitUnionFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(ZserioParser.ENUM, 0);
	};

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	enumItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumItemContext);
	    } else {
	        return this.getTypedRuleContext(EnumItemContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_enumItem;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	ASSIGN() {
	    return this.getToken(ZserioParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterEnumItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitEnumItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitEnumItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitmaskDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_bitmaskDeclaration;
    }

	BITMASK() {
	    return this.getToken(ZserioParser.BITMASK, 0);
	};

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	bitmaskValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitmaskValueContext);
	    } else {
	        return this.getTypedRuleContext(BitmaskValueContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBitmaskDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBitmaskDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBitmaskDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitmaskValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_bitmaskValue;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	ASSIGN() {
	    return this.getToken(ZserioParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBitmaskValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBitmaskValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBitmaskValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlTableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlTableDeclaration;
    }

	SQL_TABLE() {
	    return this.getToken(ZserioParser.SQL_TABLE, 0);
	};

	id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdContext);
	    } else {
	        return this.getTypedRuleContext(IdContext,i);
	    }
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	templateParameters() {
	    return this.getTypedRuleContext(TemplateParametersContext,0);
	};

	USING() {
	    return this.getToken(ZserioParser.USING, 0);
	};

	sqlTableFieldDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlTableFieldDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SqlTableFieldDefinitionContext,i);
	    }
	};

	sqlConstraintDefinition() {
	    return this.getTypedRuleContext(SqlConstraintDefinitionContext,0);
	};

	sqlWithoutRowId() {
	    return this.getTypedRuleContext(SqlWithoutRowIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlTableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlTableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlTableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlTableFieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlTableFieldDefinition;
    }

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	SQL_VIRTUAL() {
	    return this.getToken(ZserioParser.SQL_VIRTUAL, 0);
	};

	sqlConstraint() {
	    return this.getTypedRuleContext(SqlConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlTableFieldDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlTableFieldDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlTableFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlConstraintDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlConstraintDefinition;
    }

	sqlConstraint() {
	    return this.getTypedRuleContext(SqlConstraintContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlConstraintDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlConstraintDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlConstraintDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlConstraint;
    }

	SQL() {
	    return this.getToken(ZserioParser.SQL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlWithoutRowIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlWithoutRowId;
    }

	SQL_WITHOUT_ROWID() {
	    return this.getToken(ZserioParser.SQL_WITHOUT_ROWID, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlWithoutRowId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlWithoutRowId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlWithoutRowId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlDatabaseDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlDatabaseDefinition;
    }

	SQL_DATABASE() {
	    return this.getToken(ZserioParser.SQL_DATABASE, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	sqlDatabaseFieldDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlDatabaseFieldDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SqlDatabaseFieldDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlDatabaseDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlDatabaseDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlDatabaseDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlDatabaseFieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_sqlDatabaseFieldDefinition;
    }

	typeInstantiation() {
	    return this.getTypedRuleContext(TypeInstantiationContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterSqlDatabaseFieldDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitSqlDatabaseFieldDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitSqlDatabaseFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServiceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_serviceDefinition;
    }

	SERVICE() {
	    return this.getToken(ZserioParser.SERVICE, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	serviceMethodDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServiceMethodDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ServiceMethodDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterServiceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitServiceDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitServiceDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServiceMethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_serviceMethodDefinition;
    }

	typeReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeReferenceContext);
	    } else {
	        return this.getTypedRuleContext(TypeReferenceContext,i);
	    }
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterServiceMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitServiceMethodDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitServiceMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PubsubDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_pubsubDefinition;
    }

	PUBSUB() {
	    return this.getToken(ZserioParser.PUBSUB, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	pubsubMessageDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PubsubMessageDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PubsubMessageDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterPubsubDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitPubsubDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitPubsubDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PubsubMessageDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_pubsubMessageDefinition;
    }

	topicDefinition() {
	    return this.getTypedRuleContext(TopicDefinitionContext,0);
	};

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterPubsubMessageDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitPubsubMessageDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitPubsubMessageDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TopicDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_topicDefinition;
    }

	TOPIC() {
	    return this.getToken(ZserioParser.TOPIC, 0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	PUBLISH() {
	    return this.getToken(ZserioParser.PUBLISH, 0);
	};

	SUBSCRIBE() {
	    return this.getToken(ZserioParser.SUBSCRIBE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTopicDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTopicDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTopicDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_functionDefinition;
    }

	FUNCTION() {
	    return this.getToken(ZserioParser.FUNCTION, 0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFunctionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_functionType;
    }

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_functionName;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_functionBody;
    }

	LBRACE() {
	    return this.getToken(ZserioParser.LBRACE, 0);
	};

	RETURN() {
	    return this.getToken(ZserioParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	RBRACE() {
	    return this.getToken(ZserioParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeParameters;
    }

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	parameterDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefinitionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_parameterDefinition;
    }

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitParameterDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitParameterDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_templateParameters;
    }

	LT() {
	    return this.getToken(ZserioParser.LT, 0);
	};

	id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdContext);
	    } else {
	        return this.getTypedRuleContext(IdContext,i);
	    }
	};

	GT() {
	    return this.getToken(ZserioParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTemplateParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTemplateParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTemplateParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_templateArguments;
    }

	LT() {
	    return this.getToken(ZserioParser.LT, 0);
	};

	templateArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TemplateArgumentContext,i);
	    }
	};

	GT() {
	    return this.getToken(ZserioParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTemplateArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTemplateArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTemplateArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_templateArgument;
    }

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTemplateArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTemplateArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTemplateArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstantiateDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_instantiateDeclaration;
    }

	INSTANTIATE() {
	    return this.getToken(ZserioParser.INSTANTIATE, 0);
	};

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ZserioParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterInstantiateDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitInstantiateDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitInstantiateDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitwiseXorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	XOR() {
	    return this.getToken(ZserioParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBitwiseXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBitwiseXorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBitwiseXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.BitwiseXorExpressionContext = BitwiseXorExpressionContext;

class DotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	DOT() {
	    return this.getToken(ZserioParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.DotExpressionContext = DotExpressionContext;

class ValueofExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	VALUEOF() {
	    return this.getToken(ZserioParser.VALUEOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterValueofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitValueofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitValueofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.ValueofExpressionContext = ValueofExpressionContext;

class ShiftExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.GT);
	    } else {
	        return this.getToken(ZserioParser.GT, i);
	    }
	};


	LSHIFT() {
	    return this.getToken(ZserioParser.LSHIFT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.ShiftExpressionContext = ShiftExpressionContext;

class ArrayExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACKET() {
	    return this.getToken(ZserioParser.RBRACKET, 0);
	};

	LBRACKET() {
	    return this.getToken(ZserioParser.LBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterArrayExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitArrayExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitArrayExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.ArrayExpressionContext = ArrayExpressionContext;

class NumbitsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	NUMBITS() {
	    return this.getToken(ZserioParser.NUMBITS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterNumbitsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitNumbitsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitNumbitsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.NumbitsExpressionContext = NumbitsExpressionContext;

class AdditiveExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(ZserioParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(ZserioParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LT() {
	    return this.getToken(ZserioParser.LT, 0);
	};

	LE() {
	    return this.getToken(ZserioParser.LE, 0);
	};

	GT() {
	    return this.getToken(ZserioParser.GT, 0);
	};

	GE() {
	    return this.getToken(ZserioParser.GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.RelationalExpressionContext = RelationalExpressionContext;

class LengthofExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	LENGTHOF() {
	    return this.getToken(ZserioParser.LENGTHOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLengthofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLengthofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLengthofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.LengthofExpressionContext = LengthofExpressionContext;

class IdentifierExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.IdentifierExpressionContext = IdentifierExpressionContext;

class MultiplicativeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	MULTIPLY() {
	    return this.getToken(ZserioParser.MULTIPLY, 0);
	};

	DIVIDE() {
	    return this.getToken(ZserioParser.DIVIDE, 0);
	};

	MODULO() {
	    return this.getToken(ZserioParser.MODULO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class LogicalOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LOGICAL_OR() {
	    return this.getToken(ZserioParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class BitwiseOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	OR() {
	    return this.getToken(ZserioParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBitwiseOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.BitwiseOrExpressionContext = BitwiseOrExpressionContext;

class ParenthesizedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class BitwiseAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(ZserioParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBitwiseAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.BitwiseAndExpressionContext = BitwiseAndExpressionContext;

class EqualityExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ZserioParser.EQ, 0);
	};

	NE() {
	    return this.getToken(ZserioParser.NE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.EqualityExpressionContext = EqualityExpressionContext;

class LogicalAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LOGICAL_AND() {
	    return this.getToken(ZserioParser.LOGICAL_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class FunctionCallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFunctionCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFunctionCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFunctionCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.FunctionCallExpressionContext = FunctionCallExpressionContext;

class IndexExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(ZserioParser.INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.IndexExpressionContext = IndexExpressionContext;

class UnaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(ZserioParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(ZserioParser.MINUS, 0);
	};

	BANG() {
	    return this.getToken(ZserioParser.BANG, 0);
	};

	TILDE() {
	    return this.getToken(ZserioParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitUnaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.UnaryExpressionContext = UnaryExpressionContext;

class LiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.LiteralExpressionContext = LiteralExpressionContext;

class TernaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	QUESTIONMARK() {
	    return this.getToken(ZserioParser.QUESTIONMARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ZserioParser.TernaryExpressionContext = TernaryExpressionContext;

class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_literal;
    }

	BINARY_LITERAL() {
	    return this.getToken(ZserioParser.BINARY_LITERAL, 0);
	};

	OCTAL_LITERAL() {
	    return this.getToken(ZserioParser.OCTAL_LITERAL, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ZserioParser.DECIMAL_LITERAL, 0);
	};

	HEXADECIMAL_LITERAL() {
	    return this.getToken(ZserioParser.HEXADECIMAL_LITERAL, 0);
	};

	BOOL_LITERAL() {
	    return this.getToken(ZserioParser.BOOL_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ZserioParser.STRING_LITERAL, 0);
	};

	FLOAT_LITERAL() {
	    return this.getToken(ZserioParser.FLOAT_LITERAL, 0);
	};

	DOUBLE_LITERAL() {
	    return this.getToken(ZserioParser.DOUBLE_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_id;
    }

	ID() {
	    return this.getToken(ZserioParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeReference;
    }

	builtinType() {
	    return this.getTypedRuleContext(BuiltinTypeContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	templateArguments() {
	    return this.getTypedRuleContext(TemplateArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeInstantiationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeInstantiation;
    }

	typeReference() {
	    return this.getTypedRuleContext(TypeReferenceContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	dynamicLengthArgument() {
	    return this.getTypedRuleContext(DynamicLengthArgumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeInstantiation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeInstantiation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeInstantiation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BuiltinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_builtinType;
    }

	intType() {
	    return this.getTypedRuleContext(IntTypeContext,0);
	};

	varintType() {
	    return this.getTypedRuleContext(VarintTypeContext,0);
	};

	fixedBitFieldType() {
	    return this.getTypedRuleContext(FixedBitFieldTypeContext,0);
	};

	dynamicBitFieldType() {
	    return this.getTypedRuleContext(DynamicBitFieldTypeContext,0);
	};

	boolType() {
	    return this.getTypedRuleContext(BoolTypeContext,0);
	};

	stringType() {
	    return this.getTypedRuleContext(StringTypeContext,0);
	};

	floatType() {
	    return this.getTypedRuleContext(FloatTypeContext,0);
	};

	externType() {
	    return this.getTypedRuleContext(ExternTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBuiltinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBuiltinType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBuiltinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_qualifiedName;
    }

	id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdContext);
	    } else {
	        return this.getTypedRuleContext(IdContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.DOT);
	    } else {
	        return this.getToken(ZserioParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitQualifiedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeArguments;
    }

	LPAREN() {
	    return this.getToken(ZserioParser.LPAREN, 0);
	};

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ZserioParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZserioParser.COMMA);
	    } else {
	        return this.getToken(ZserioParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_typeArgument;
    }

	EXPLICIT() {
	    return this.getToken(ZserioParser.EXPLICIT, 0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitTypeArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitTypeArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicLengthArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_dynamicLengthArgument;
    }

	LT() {
	    return this.getToken(ZserioParser.LT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	GT() {
	    return this.getToken(ZserioParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterDynamicLengthArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitDynamicLengthArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitDynamicLengthArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_intType;
    }

	INT8() {
	    return this.getToken(ZserioParser.INT8, 0);
	};

	INT16() {
	    return this.getToken(ZserioParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(ZserioParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(ZserioParser.INT64, 0);
	};

	UINT8() {
	    return this.getToken(ZserioParser.UINT8, 0);
	};

	UINT16() {
	    return this.getToken(ZserioParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(ZserioParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(ZserioParser.UINT64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterIntType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitIntType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitIntType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_varintType;
    }

	VARINT() {
	    return this.getToken(ZserioParser.VARINT, 0);
	};

	VARINT16() {
	    return this.getToken(ZserioParser.VARINT16, 0);
	};

	VARINT32() {
	    return this.getToken(ZserioParser.VARINT32, 0);
	};

	VARINT64() {
	    return this.getToken(ZserioParser.VARINT64, 0);
	};

	VARSIZE() {
	    return this.getToken(ZserioParser.VARSIZE, 0);
	};

	VARUINT() {
	    return this.getToken(ZserioParser.VARUINT, 0);
	};

	VARUINT16() {
	    return this.getToken(ZserioParser.VARUINT16, 0);
	};

	VARUINT32() {
	    return this.getToken(ZserioParser.VARUINT32, 0);
	};

	VARUINT64() {
	    return this.getToken(ZserioParser.VARUINT64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterVarintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitVarintType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitVarintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FixedBitFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_fixedBitFieldType;
    }

	COLON() {
	    return this.getToken(ZserioParser.COLON, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ZserioParser.DECIMAL_LITERAL, 0);
	};

	BIT_FIELD() {
	    return this.getToken(ZserioParser.BIT_FIELD, 0);
	};

	INT_FIELD() {
	    return this.getToken(ZserioParser.INT_FIELD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFixedBitFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFixedBitFieldType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFixedBitFieldType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicBitFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_dynamicBitFieldType;
    }

	BIT_FIELD() {
	    return this.getToken(ZserioParser.BIT_FIELD, 0);
	};

	INT_FIELD() {
	    return this.getToken(ZserioParser.INT_FIELD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterDynamicBitFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitDynamicBitFieldType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitDynamicBitFieldType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_boolType;
    }

	BOOL() {
	    return this.getToken(ZserioParser.BOOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterBoolType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitBoolType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitBoolType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_stringType;
    }

	STRING() {
	    return this.getToken(ZserioParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitStringType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitStringType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_floatType;
    }

	FLOAT16() {
	    return this.getToken(ZserioParser.FLOAT16, 0);
	};

	FLOAT32() {
	    return this.getToken(ZserioParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(ZserioParser.FLOAT64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterFloatType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitFloatType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitFloatType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZserioParser.RULE_externType;
    }

	EXTERN() {
	    return this.getToken(ZserioParser.EXTERN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.enterExternType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZserioParserListener ) {
	        listener.exitExternType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ZserioParserVisitor ) {
	        return visitor.visitExternType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




ZserioParser.PackageDeclarationContext = PackageDeclarationContext; 
ZserioParser.CompatibilityVersionDirectiveContext = CompatibilityVersionDirectiveContext; 
ZserioParser.PackageNameDefinitionContext = PackageNameDefinitionContext; 
ZserioParser.ImportDeclarationContext = ImportDeclarationContext; 
ZserioParser.LanguageDirectiveContext = LanguageDirectiveContext; 
ZserioParser.TypeDeclarationContext = TypeDeclarationContext; 
ZserioParser.SymbolDefinitionContext = SymbolDefinitionContext; 
ZserioParser.ConstDefinitionContext = ConstDefinitionContext; 
ZserioParser.RuleGroupDefinitionContext = RuleGroupDefinitionContext; 
ZserioParser.RuleDefinitionContext = RuleDefinitionContext; 
ZserioParser.SubtypeDeclarationContext = SubtypeDeclarationContext; 
ZserioParser.StructureDeclarationContext = StructureDeclarationContext; 
ZserioParser.StructureFieldDefinitionContext = StructureFieldDefinitionContext; 
ZserioParser.FieldAlignmentContext = FieldAlignmentContext; 
ZserioParser.FieldOffsetContext = FieldOffsetContext; 
ZserioParser.FieldTypeIdContext = FieldTypeIdContext; 
ZserioParser.FieldArrayRangeContext = FieldArrayRangeContext; 
ZserioParser.FieldInitializerContext = FieldInitializerContext; 
ZserioParser.FieldOptionalClauseContext = FieldOptionalClauseContext; 
ZserioParser.FieldConstraintContext = FieldConstraintContext; 
ZserioParser.ChoiceDeclarationContext = ChoiceDeclarationContext; 
ZserioParser.ChoiceCasesContext = ChoiceCasesContext; 
ZserioParser.ChoiceCaseContext = ChoiceCaseContext; 
ZserioParser.ChoiceDefaultContext = ChoiceDefaultContext; 
ZserioParser.ChoiceFieldDefinitionContext = ChoiceFieldDefinitionContext; 
ZserioParser.UnionDeclarationContext = UnionDeclarationContext; 
ZserioParser.UnionFieldDefinitionContext = UnionFieldDefinitionContext; 
ZserioParser.EnumDeclarationContext = EnumDeclarationContext; 
ZserioParser.EnumItemContext = EnumItemContext; 
ZserioParser.BitmaskDeclarationContext = BitmaskDeclarationContext; 
ZserioParser.BitmaskValueContext = BitmaskValueContext; 
ZserioParser.SqlTableDeclarationContext = SqlTableDeclarationContext; 
ZserioParser.SqlTableFieldDefinitionContext = SqlTableFieldDefinitionContext; 
ZserioParser.SqlConstraintDefinitionContext = SqlConstraintDefinitionContext; 
ZserioParser.SqlConstraintContext = SqlConstraintContext; 
ZserioParser.SqlWithoutRowIdContext = SqlWithoutRowIdContext; 
ZserioParser.SqlDatabaseDefinitionContext = SqlDatabaseDefinitionContext; 
ZserioParser.SqlDatabaseFieldDefinitionContext = SqlDatabaseFieldDefinitionContext; 
ZserioParser.ServiceDefinitionContext = ServiceDefinitionContext; 
ZserioParser.ServiceMethodDefinitionContext = ServiceMethodDefinitionContext; 
ZserioParser.PubsubDefinitionContext = PubsubDefinitionContext; 
ZserioParser.PubsubMessageDefinitionContext = PubsubMessageDefinitionContext; 
ZserioParser.TopicDefinitionContext = TopicDefinitionContext; 
ZserioParser.FunctionDefinitionContext = FunctionDefinitionContext; 
ZserioParser.FunctionTypeContext = FunctionTypeContext; 
ZserioParser.FunctionNameContext = FunctionNameContext; 
ZserioParser.FunctionBodyContext = FunctionBodyContext; 
ZserioParser.TypeParametersContext = TypeParametersContext; 
ZserioParser.ParameterDefinitionContext = ParameterDefinitionContext; 
ZserioParser.TemplateParametersContext = TemplateParametersContext; 
ZserioParser.TemplateArgumentsContext = TemplateArgumentsContext; 
ZserioParser.TemplateArgumentContext = TemplateArgumentContext; 
ZserioParser.InstantiateDeclarationContext = InstantiateDeclarationContext; 
ZserioParser.ExpressionContext = ExpressionContext; 
ZserioParser.LiteralContext = LiteralContext; 
ZserioParser.IdContext = IdContext; 
ZserioParser.TypeReferenceContext = TypeReferenceContext; 
ZserioParser.TypeInstantiationContext = TypeInstantiationContext; 
ZserioParser.BuiltinTypeContext = BuiltinTypeContext; 
ZserioParser.QualifiedNameContext = QualifiedNameContext; 
ZserioParser.TypeArgumentsContext = TypeArgumentsContext; 
ZserioParser.TypeArgumentContext = TypeArgumentContext; 
ZserioParser.DynamicLengthArgumentContext = DynamicLengthArgumentContext; 
ZserioParser.IntTypeContext = IntTypeContext; 
ZserioParser.VarintTypeContext = VarintTypeContext; 
ZserioParser.FixedBitFieldTypeContext = FixedBitFieldTypeContext; 
ZserioParser.DynamicBitFieldTypeContext = DynamicBitFieldTypeContext; 
ZserioParser.BoolTypeContext = BoolTypeContext; 
ZserioParser.StringTypeContext = StringTypeContext; 
ZserioParser.FloatTypeContext = FloatTypeContext; 
ZserioParser.ExternTypeContext = ExternTypeContext; 
