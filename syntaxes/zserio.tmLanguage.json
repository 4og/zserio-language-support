{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "zserio",
    "scopeName": "source.zs",
    "patterns": [{
            "include": "#compatibility"
        },
        {
            "include": "#package"
        },
        {
            "include": "#import"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#types"
        },
        {
            "include": "#storage_modifiers"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#enum"
        },
        {
            "include": "#entities"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "enum": {
            "match": "(enum)\\s+([\\w|:]+)\\s+(\\w+)",
            "captures": {
                "1": { "name": "keyword.other.zserio" },
                "2": {
                    "patterns": [{
                        "include": "#types"
                    }]
                },
                "3": { "name": "entity.name.type.enum.zserio" }
            }
        },
        "entities": {
            "match": "(struct|rule_group|choice|union|sql_table|sql_database|service|pubsub|explicit)\\s+(\\w+)",
            "captures": {
                "1": { "name": "keyword.other.zserio" },
                "2": { "name": "entity.name.type.zserio" }
            }
        },
        "constants": {
            "patterns": [{
                    "name": "constant.numeric.zserio",
                    "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
                },
                {
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.zserio"
                }
            ]
        },
        "compatibility": {
            "match": "\\b(zserio_compatibility_version)\\b",
            "name": "keyword.other.zserio"
        },
        "package": {
            "match": "\\s*(package)\\s+([\\w.]+)\\s*;",
            "captures": {
                "1": {
                    "name": "keyword.other.zserio"
                },
                "2": {
                    "name": "string.unquoted.zserio.package"
                }
            }
        },
        "import": {
            "match": "\\s*(import)\\s+([\\w.]+)(\\*?)\\s*;",
            "captures": {
                "1": {
                    "name": "keyword.other.zserio"
                },
                "2": {
                    "name": "string.unquoted.zserio.package"
                },
                "3": {
                    "name": "string.other.zserio"
                }
            }
        },
        "keywords": {
            "patterns": [{
                    "match": "\\b(rule|case|default|publish|subscribe|topic|instantiate|if|return|sql|numbits|lengthof|valueof|on|using|isset)\\b",
                    "name": "keyword.control.zserio"
                },
                {
                    "match": "@index",
                    "name": "keyword.control.zserio"
                },
                {
                    "match": "(==|!=|<=|>=|<|>)",
                    "name": "keyword.operator.comparison.zserio"
                },
                {
                    "match": "(\\+|\\-|\\*|\\/|%)",
                    "name": "keyword.operator.arithmetic.zserio"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.zserio"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.zserio"
                }
            ]
        },
        "storage": {
            "patterns": [{
                "match": "\\b(const|subtype|bitmask|function|sql_without_rowid|sql_virtual)\\b",
                "name": "keyword.other.zserio"
            }]
        },
        "types": {
            "patterns": [{
                    "match": "\\bbool\\b",
                    "name": "storage.type.boolean.zserio"
                },
                {
                    "match": "\\b(bit|bitmask)\\b",
                    "name": "storage.type.bit.zserio"
                },
                {
                    "match": "\\b(float(16|32|64)|(var|varu|u)?int(8|16|32|64)?|varsize)\\b",
                    "name": "storage.type.numeric.zserio"
                },
                {
                    "match": "\\bstring\\b",
                    "name": "storage.type.string.zserio"
                },
                {
                    "match": "\\bextern\\b",
                    "name": "storage.type.extern.zserio"
                },
                {
                    "match": "\\bbytes\\b",
                    "name": "storage.type.bytes.zserio"
                }
            ]
        },
        "storage_modifiers": {
            "patterns": [{
                "match": "\\b(packed|implicit|optional|align|extend)\\b",
                "name": "storage.modifier.zserio"
            }]
        },
        "annotations": {
            "patterns": [{
                "match": "(@deprecated|@removed)\\b",
                "name": "storage.modifier.annotation.zserio"
            }]
        },
        "strings": {
            "name": "string.quoted.double.zserio",
            "begin": "\"",
            "end": "\"",
            "patterns": [{
                "match": "\\\\.",
                "name": "constant.character.escape.zserio"
            }]
        },
        "comments": {
            "patterns": [{
                    "name": "comment.block.zserio",
                    "begin": "(\\/\\*)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.zserio"
                        }
                    },
                    "end": "(\\*\\/)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.zserio"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.zserio",
                    "begin": "(\\/\\/)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.zserio"
                        }
                    },
                    "end": "(?:\\n|$)"
                }
            ]
        }
    }
}